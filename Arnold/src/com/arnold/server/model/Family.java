package com.arnold.server.model;

import java.util.ArrayList;
import java.util.List;

import com.arnold.server.model.base.BaseFamily;
import com.arnold.server.util.ArnoldUtils;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.pallas.utils.Utils;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Family extends BaseFamily<Family> {
	public static final Family dao = new Family();
	private String tableName = "tb_family";
	
	
	public Page<Family> pageFamilyByIds(int pageNumber, int pageSize, String ids){
		
		String sql = "SELECT *";
		
		String sqlExceptSelect = " FROM tb_family t1 ";
		
		if(!Utils.isBlankOrEmpty(ids)){
			
			String[] idStrArr = ids.split(",");
			int i = 0;
			for(String str : idStrArr){
				if(i == 0){
					sqlExceptSelect += " WHERE t1.id = '" + str + "'";
				}else{
					sqlExceptSelect += " OR t1.id = '" + str + "'";
				}
				i++;
			}
			
		}
		
		return dao.paginate(pageNumber, pageSize, sql, sqlExceptSelect);
				
	}

	public Family findByFamilyId(String familyId) {
		String sql = "select tf.*,bv.`name` as villagerName from tb_family tf left join tb_villager bv on bv.id = tf.villagerId where (tf.id=? and tf.isValid=?)";
		
		return dao.findFirst(sql, familyId, 0);
	}
	public static List<Family> findAllFamilys() {
		String sql = "select * from tb_family tf";
		return dao.find(sql);
	}
	/**
	 * @Description: 根据行政区域ids查询
	 * @author Li Bangming;
	 * @date 2017年8月19日 上午11:31:41
	 * @param familyId
	 * @return
	 */
	public static  List<Family> findByFamilyIdByRegionIds(String regionIds) {
		String regionIdsExpress= ArnoldUtils.EMPTY_STR;
		if(!Utils.isBlankOrEmpty(regionIds)){
			regionIdsExpress=" and  tf.regionId in("+regionIds+")";
		}
		String sql="select tf.id,tf.number,tf.villagerId,tf.regionId,tv.`name` as villagerName "
				+ "from tb_family tf LEFT JOIN tb_villager tv ON tv.id = tf.villagerId WHERE 1=1" +regionIdsExpress;
		return dao.find(sql);
	}
	
	public static  List<Family> findFamilyIdByRegionId(String regionId,String regionName) {
		String regionIdsExpress= ArnoldUtils.EMPTY_STR;
		if(!Utils.isBlankOrEmpty(regionId)){
			regionIdsExpress=" and region1.parentId ='"+regionId+"'";
		}
		if(!Utils.isBlankOrEmpty(regionName)){
			regionIdsExpress=" and region2.shortName ='"+regionName+"'";
		}
		String sql = "select family1.*,villager1.`name` as villagerName from tb_family as family1 inner join tb_villager as villager1 on villager1.id = family1.villagerId inner join tb_region as region1 on family1.regionId=region1.id inner join  tb_region as region2 on region2.id=region1.parentId where region2.regionType=5 and family1.isValid = 0 " + regionIdsExpress;
		return dao.find(sql);
	}
	/**
	 * @Description: 获取最大编号的家庭信息
	 * @author Li Bangming;
	 * @date 2017年8月19日 上午11:31:41
	 * @return
	 */
	public static  Family findFamilyByNumberPrefix(String numberPrefix) {
		if(com.huntersun.tool.Utils.isBlankOrEmpty(numberPrefix)){
			return null;
		}
		String sql="select * from tb_family tf where tf.number like '"+numberPrefix+"%' ORDER BY tf.number desc limit 1";
		return dao.findFirst(sql);
	}
	/**
	 * @Description: 获取
	 * @author Li Bangming;
	 * @date 2017年8月19日 上午11:31:41
	 * @return
	 */
	public static  Family findFamilyByNumber(String number) {
		if(com.huntersun.tool.Utils.isBlankOrEmpty(number)){
			return null;
		}
		String sql="select * from tb_family tf where tf.number = '"+number+"'";
		return dao.findFirst(sql);
	}
	
	public static List<Family> listFamily() {
		
		String sql="SELECT * FROM tb_family WHERE isValid>=?";
		return dao.find(sql,0);
	}

	public Record reportFamilyInfo(String familyId) {
		String sql = "SELECT "
		  + "tf.regionId, "
		  + "GROUP_CONCAT(DISTINCT tm.orgId) orgIds, "
		  + "GROUP_CONCAT(DISTINCT tm.id) memberIds, "
		  + "GROUP_CONCAT(DISTINCT tm.name) memberNames, "
		  + "tv.id AS villagerId, "
		  + "tv.name AS villagerName, "
		  + "(SELECT " 
		  + " COUNT(1) " 
		  + "FROM "
		  + " tb_villager ctv "
		  + "WHERE ctv.isValid = tf.isValid " 
		  + "  AND ctv.familyId = tf.id) AS villagerCount, "
		  + "tf.planeTime, "
		  + "GROUP_CONCAT(DISTINCT tfbr.burdenId) burdenIds, "
		  + "IF((SELECT COUNT(1) FROM tb_villager itv WHERE "
		  + " itv.isValid = tf.isValid AND itv.familyId=tf.id AND itv.isSeriousPatient=?),1,0) AS isSeriousPatient,"
		  + "tf.isDropout, "
		  + "tfl.isDangerousBuilding, "
		  + "tf.ralationTypeId, "
		  + "tfl.roadCondition, "
		  + "tfl.houseStructureId, "
		  + "tfl.isGalvanical, "
		  + "tfl.drinkConditionId, "
		  + "tf.aspirationId "
		  + "FROM "
		  + "tb_family tf " 
		  + "LEFT JOIN tb_leader_region_relation tmfr " 
		  + "  ON tmfr.isValid = tf.isValid " 
		  + "  AND tmfr.regionId = tf.regionId " 
		  + "LEFT JOIN tb_leader tm " 
		  + "  ON tm.isValid = tmfr.isValid " 
		  + "  AND tm.id = tmfr.leaderId " 
		  + "JOIN tb_villager tv " 
		  + "  ON tv.isValid = tf.isValid " 
		  + "  AND tv.id = tf.villagerId " 
		  + "LEFT JOIN tb_family_burden_relation tfbr " 
		  + "  ON tfbr.isValid = tf.isValid " 
		  + "  AND tfbr.familyId = tf.id " 
		  + "JOIN tb_family_livecondition tfl ON tfl.isValid = tf.isValid AND tfl.familyId = tf.id "
		  + "WHERE tf.isValid = ? " 
		  + " AND tf.id =?";
		return Db.findFirst(sql,1,0,familyId);
	}
	
	/**
	 * 获取家庭户主相关信息
	 * @param familyId
	 * @return
	 */
	public Record getFamilyMasterVillageInfo(String familyId) {
		String sql = " SELECT "
				+ "   tf.id, "
				+ "   tv.id AS villagerId, "
				+ "   tf.regionId, "
				+ "   tv.name, "
				+ "   (SELECT  "
				+ "     COUNT(1) "
				+ "   FROM "
				+ "     tb_villager ctv "
				+ "   WHERE ctv.isValid = tf.isValid "
				+ "     AND ctv.familyId = tf.id) AS vCount "
				+ " FROM "
				+ "   tb_family tf  "
				+ "   JOIN tb_villager tv  "
				+ "     ON tv.isValid = tf.isValid  "
				+ "     AND tv.id = tf.villagerId  "
				+ " WHERE tf.id = ? "
				+ "   AND tf.isValid = ? ";
		return Db.findFirst(sql, familyId, 0);
	}

	/**
	 * @Author PanChangGui
	 * @Time 2017年10月1日 下午7:29:10
	 * @Description 查询家庭异地搬迁
	 */
	public Family findFamilyRemoval(String familyId) {
		String sql = "SELECT id, isMoveFamily,removalTypeId,outRegion,toRegion,resettlementWayId,"
				+ "difficult,stayInTime,isStayIn,isMoval FROM " + tableName + " WHERE id=? AND isValid>=?";
		
		// TODO Auto-generated method stub
		return dao.findFirst(sql, familyId, 0);
	}
	
	/**
	 * 依据不同程度的请求参数获取贫困户信息
	 * @param fimalyId
	 * @param groupId 组
	 * @param hamletId	村
	 * @param countryId	乡
	 * @return
	 */
	public List<Record> getNeedStatisticsFamilyInfo(String fimalyId, String groupId, String hamletId, String countryId) {
		StringBuffer bSql = new StringBuffer("SELECT tf.id AS familyId,"
				+ "tf.regionId,"
				+ "tf.villagerId,"
				+ "tv.name,"
				+ "(SELECT COUNT(*) FROM tb_villager ctv where ctv.isValid = tf.isValid AND ctv.familyId = tf.id) AS villagerCount "
				+ " FROM "+tableName+" tf "
				+ " JOIN tb_villager tv ON tv.id = tf.villagerId and tv.isValid=tf.isValid "
				+ " where tf.isValid = 0 ");
		if(!Utils.isBlankOrEmpty(fimalyId)){
			//获取家庭信息
			bSql.append(" and tf.id = '"+fimalyId+"'");
		}else if(!Utils.isBlankOrEmpty(groupId)){
			//获取组家庭信息
			bSql.append(" and tf.regionId = '"+groupId+"'");
		}else if(!Utils.isBlankOrEmpty(hamletId)){
			//获取村家庭信息
			List<Region> ownGroupIds = Region.dao.findChildRegion(hamletId);
			if(null!=ownGroupIds && ownGroupIds.size()>0){
				bSql.append(" and ( ");
				for(int i=0;i<ownGroupIds.size();i++){
					Region region = ownGroupIds.get(i);
					if(i==0){
						bSql.append("  tf.regionId = '"+region.getId()+"'");
					}else{
						bSql.append(" or tf.regionId = '"+region.getId()+"'");
					}
				}
				bSql.append(" ) ");
			}else{
				return new ArrayList<Record>();//没有找到对应的组信息
			}
		}else if(!Utils.isBlankOrEmpty(countryId)){
			//获取乡家庭信息
			List<Region> ownGroupIds = Region.dao.findGroupInfoByCountryId(countryId);
			if(null!=ownGroupIds && ownGroupIds.size()>0){
				bSql.append(" and ( ");
				for(int i=0;i<ownGroupIds.size();i++){
					Region region = ownGroupIds.get(i);
					if(i==0){
						bSql.append("  tf.regionId = '"+region.getId()+"'");
					}else{
						bSql.append(" or tf.regionId = '"+region.getId()+"'");
					}
				}
				bSql.append(" ) ");
			}else{
				return new ArrayList<Record>();//没有找到对应的组信息
			}
		}
		return Db.find(bSql.toString());
	}
}
