package com.arnold.server.model;

import com.arnold.server.model.base.BaseFamilyEconomicUnderwritingHappen;
import com.huntersun.tool.Utils;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class FamilyEconomicUnderwritingHappen extends BaseFamilyEconomicUnderwritingHappen<FamilyEconomicUnderwritingHappen> {
	public static final FamilyEconomicUnderwritingHappen dao = new FamilyEconomicUnderwritingHappen();
	public static final String TABLE_NAME = "tb_family_economic_underwriting_happen";
	/**
	 * @Description:保存家庭经济包销信息
	 * @author Li Bangming;
	 * @date 2017年8月18日 下午3:38:41
	 * @collectiveEconomy 家庭经济包销信息对象
	 * @return
	 */
	public  boolean saveFamilyEconomicUnderwritingHappen(FamilyEconomicUnderwritingHappen familyEconomicUnderwritingHappen) {
	    boolean isSave=	familyEconomicUnderwritingHappen.save();
		return isSave;
	}
	/**
	 * @Description:根据id查询家庭经济包销信息
	 * @author Li Bangming;
	 * @date 2017年8月18日 下午3:38:41
	 * @collectiveEconomy 家庭经济包销信息对象
	 * @return
	 */
	public  static  FamilyEconomicUnderwritingHappen queryFamilyEconomicUnderwritingHappenById(String id) {
		return dao.findById(id);
	}
	
	/**
	 * @Description:保存家庭经济包销信息
	 * @author Li Bangming;
	 * @date 2017年8月18日 下午3:38:41
	 * @collectiveEconomy 家庭经济包销信息对象
	 * @return
	 */
	public  boolean updateFamilyEconomicUnderwritingHappen(FamilyEconomicUnderwritingHappen familyEconomicUnderwritingHappen) {
	    boolean isUpdate=familyEconomicUnderwritingHappen.update();
		return isUpdate;
	}
	/**
	 * @Description:分页家庭经济包销信息
	 * @author Li Bangming;
	 * @date 2017年8月18日 下午3:38:41
	 * @return
	 */
	public static Page<FamilyEconomicUnderwritingHappen>  pageFamilyEconomicUnderwritingHappen(int pageNumber,int pageSize,
			String familyEconomicId,String familyId,String parentTypeId){
		String select=" select tvpi.*,(select name from tb_member te where te.id=tvpi.memberId) as memberName ";
		String sqlExceptSelect="   from "+TABLE_NAME+" tvpi  where (familyEconomicId=? or familyId=?)";
		if (!Utils.isBlankOrEmpty(parentTypeId)) {
			sqlExceptSelect += " and parentTypeId like'"+parentTypeId+"'";
		}
		return dao.paginate(pageNumber, pageSize, select, sqlExceptSelect,familyEconomicId,familyId);
	}
	
	public double countUnderwritingByFamilyId(String pFamilyId, String year) {
		double resCome = 0d;
		String sql = " SELECT  "
				+ "   IFNULL( "
				+ "     CONVERT(SUM(tfeuh.price), DECIMAL), "
				+ "     0 "
				+ "   )  "
				+ " FROM "
				+ "   tb_family_economic_underwriting_happen tfeuh  "
				+ " WHERE tfeuh.familyId = '"+pFamilyId+"'  "
				+ "   AND tfeuh.tradeTime LIKE '"+year+"%'  ";
		Record info = Db.findFirst(sql);
		if(null!=info && null!=info.getBigDecimal("income")){
			resCome = info.getBigDecimal("income").doubleValue();
		}
		return resCome;
	}
	public int getUnderwritingInfos(String familyId,
			String searchYear, String typeIds) {
		int result = 0;
		if(Utils.isBlankOrEmpty(typeIds)){
			String[] types = typeIds.split(",");
			StringBuffer sql = new StringBuffer("SELECT SUM(tfep.amount) AS amount "
					+ "FROM tb_family_economic_underwriting_happen tfep "
					+ "WHERE tfep.familyId= ? AND tfep.tradeTime LIKE '"+searchYear+"%' AND (");
			for(int i=0;i<types.length;i++){
				if(i==0){
					sql.append("tfep.typeId = '"+types[i]+"'");
				}else{
					sql.append(" or tfep.typeId = '"+types[i]+"'");
				}
			}
			sql.append(")");
			Record info = Db.findFirst(sql.toString(), familyId);
			if(null!=info && null!=info.getInt("amount")){
				result = info.getInt("amount");
			}
		}
		return result;
	}
}
