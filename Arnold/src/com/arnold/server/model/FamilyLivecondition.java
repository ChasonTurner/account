package com.arnold.server.model;

import java.math.BigDecimal;
import java.util.List;

import com.arnold.server.model.base.BaseFamilyLivecondition;
import com.arnold.server.util.ArnoldUtils;
import com.huntersun.tool.Utils;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class FamilyLivecondition extends BaseFamilyLivecondition<FamilyLivecondition> {
	public static final FamilyLivecondition dao = new FamilyLivecondition();
	private final String tableName = "tb_family_livecondition";
	
	public FamilyLivecondition findByFamilyId(String familyId) {
		String sql = "select * from " + tableName + " where familyId=? and isValid>=?";
			
		return dao.findFirst(sql,familyId,0);
	}

	public List<FamilyLivecondition> findAll() {
		String sql = "select * from " + tableName + " where isValid>=?";
		return dao.find(sql,0);
	}
	
	/**
	 * 获取家庭有效的财产性收入
	 * @param familyId
	 * @return
	 */
	public BigDecimal getPropertyIncomeByFId(String familyId) {
		BigDecimal propertyIncome = BigDecimal.ZERO;
		String sql = "select propertyIncome from " + tableName + " where familyId=? AND isValid>=? ";
		FamilyLivecondition info = dao.findFirst(sql, familyId, 0);
		
		if(null!=info && !Utils.isBlankOrEmpty(info.getPropertyIncome()) && ArnoldUtils.isNumber(info.getPropertyIncome())){
			propertyIncome = BigDecimal.valueOf(Double.valueOf(info.getPropertyIncome()));
		}
		
		return propertyIncome;
	}

	public Record findFamilyIncomeByFamilyId(String familyId) {
		String sql = " SELECT "
				+ "   IFNULL(tfl.propertyIncome,'0') as propertyIncome, "
				+ "   IFNULL(tfl.allSubsidization,'0') as subsidy, "
				+ "   IFNULL(tfl.educationalExpenditure,0) as educationalExpenditure, "
				+ "   IFNULL(tfl.medicalExpenditure,0) as medicalExpenditure "
				+ " FROM "
				+ "   tb_family_livecondition tfl "
				+ " WHERE tfl.familyId = '"+familyId+"' "
				+ "   AND tfl.isValid = 0 ";
		return Db.findFirst(sql);
	}
}
