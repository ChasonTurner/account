package com.arnold.server.model;

import java.util.List;

import com.arnold.server.model.base.BaseFamilyEconomicSelfSaleHappen;
import com.huntersun.tool.Utils;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class FamilyEconomicSelfSaleHappen extends BaseFamilyEconomicSelfSaleHappen<FamilyEconomicSelfSaleHappen> {
	public static final FamilyEconomicSelfSaleHappen dao = new FamilyEconomicSelfSaleHappen();
	public static final String TABLE_NAME = "tb_family_economic_self_sale_happen";
	/**
	 * @Description:保存家庭经济自主收入信息
	 * @author Li Bangming;
	 * @date 2017年8月18日 下午3:38:41
	 * @collectiveEconomy 家庭经济自主收入信息对象
	 * @return
	 */
	public  boolean saveFamilyEconomicSelfSaleHappen(FamilyEconomicSelfSaleHappen familyEconomicSelfSaleHappen) {
	    boolean isSave=	familyEconomicSelfSaleHappen.save();
		return isSave;
	}
	/**
	 * @Description:根据id查询家庭经济自主收入信息
	 * @author Li Bangming;
	 * @date 2017年8月18日 下午3:38:41
	 * @collectiveEconomy 家庭经济自主收入信息对象
	 * @return
	 */
	public  static  FamilyEconomicSelfSaleHappen queryFamilyEconomicSelfSaleHappenById(String id) {
		return dao.findById(id);
	}
	
	/**
	 * @Description:保存家庭经济自主收入信息
	 * @author Li Bangming;
	 * @date 2017年8月18日 下午3:38:41
	 * @collectiveEconomy 家庭经济自主收入信息对象
	 * @return
	 */
	public  boolean updateFamilyEconomicSelfSaleHappen(FamilyEconomicSelfSaleHappen familyEconomicSelfSaleHappen) {
	    boolean isUpdate=familyEconomicSelfSaleHappen.update();
		return isUpdate;
	}
	/**
	 * @Description:分页家庭经济自主收入信息
	 * @author Li Bangming;
	 * @date 2017年8月18日 下午3:38:41
	 * @return
	 */
	public static Page<FamilyEconomicSelfSaleHappen>  pageFamilyEconomicSelfSaleHappen(int pageNumber,int pageSize,
			String familyEconomicId,String familyId,String parentTypeId){
		String select=" select tvpi.*,(select name from tb_member te where te.id=tvpi.memberId) as memberName ";
		String sqlExceptSelect="   from "+TABLE_NAME+" tvpi  where (familyEconomicId=? or familyId=?)";
		if (!Utils.isBlankOrEmpty(parentTypeId)) {
			sqlExceptSelect += " and parentTypeId like '" + parentTypeId + "'";
		}
		return dao.paginate(pageNumber, pageSize, select, sqlExceptSelect,familyEconomicId,familyId);
	}
	
	public double countSelfSaleByFamilyId(String pFamilyId, String year) {
		double resCome = 0d;
		String sql = " SELECT  "
				+ "   IFNULL( "
				+ "     CONVERT(SUM(tfessh.price), DECIMAL), "
				+ "     0 "
				+ "   ) as income "
				+ " FROM "
				+ "   tb_family_economic_self_sale_happen tfessh  "
				+ " WHERE tfessh.familyId = '"+pFamilyId+"' "
				+ "   AND tfessh.tradeTime LIKE '"+year+"%' ";
		Record info = Db.findFirst(sql);
		if(null!=info && null!=info.getBigDecimal("income")){
			resCome = info.getBigDecimal("income").doubleValue();
		}
		return resCome;
	}
	
	/*
	 * 自主+包销
	 */
	public List<Record> getEconomicOrderInfos(String familyId, String searchYear) {
		String sql = "SELECT info.typeId,info.unitPrice,SUM(info.amount) as amount,SUM(info.price) as price FROM ("
				+ " SELECT tfessh.typeId,tfessh.unitPrice,tfessh.amount,tfessh.price "
				+ " FROM tb_family_economic_self_sale_happen tfessh "
				+ " WHERE tfessh.familyId = ? AND tfessh.tradeTime LIKE '"+searchYear+"%'"
				+ " UNION ALL "
				+ "SELECT tfeuh.typeId,tfeuh.unitPrice,tfeuh.amount,tfeuh.price "
				+ " FROM tb_family_economic_underwriting_happen tfeuh "
				+ " WHERE tfeuh.familyId = ? AND tfeuh.tradeTime LIKE '"+searchYear+"%') info"
				+ " GROUP BY info.typeId";
		return Db.find(sql, familyId,familyId);
	}
	
	public int getSelfSaleInfos(String familyId,
			String searchYear, String typeIds) {
		int result = 0;
		if(Utils.isBlankOrEmpty(typeIds)){
			String[] types = typeIds.split(",");
			StringBuffer sql = new StringBuffer("SELECT SUM(tfep.amount) AS amount "
					+ "FROM tb_family_economic_self_sale_happen tfep "
					+ "WHERE tfep.familyId= ? AND tfep.tradeTime LIKE '"+searchYear+"%' AND (");
			for(int i=0;i<types.length;i++){
				if(i==0){
					sql.append("tfep.typeId = '"+types[i]+"'");
				}else{
					sql.append(" or tfep.typeId = '"+types[i]+"'");
				}
			}
			sql.append(")");
			Record info = Db.findFirst(sql.toString(), familyId);
			if(null!=info && null!=info.getInt("amount")){
				result = info.getInt("amount");
			}
		}
		return result;
	}
	
	/**
	 * @description  获取家庭年度自主销售+包销流水
	 * @author luzy
	 * @date 2017年12月26日
	 * @param pFamilyId
	 * @param pYear
	 */
	public List<Record> listEconomicOrderInfos(String pFamilyId, String pYear) {
		String bSql = " SELECT "
				+ "   tfessh.typeId,"
				+ "   tfessh.unitPrice,"
				+ "   tfessh.amount "
				+ " FROM"
				+ "   tb_family_economic_self_sale_happen tfessh "
				+ " WHERE tfessh.familyId = ?"
				+ "   AND tfessh.tradeTime LIKE '"+pYear+"%' "
				+ " UNION"
				+ " ALL "
				+ " SELECT "
				+ "   tfeuh.typeId,"
				+ "   tfeuh.unitPrice,"
				+ "   tfeuh.amount "
				+ " FROM"
				+ "   tb_family_economic_underwriting_happen tfeuh "
				+ " WHERE tfeuh.familyId = ? "
				+ "   AND tfeuh.tradeTime LIKE '"+pYear+"%' ";
		return Db.find(bSql, pFamilyId, pFamilyId);
	}
	
}
