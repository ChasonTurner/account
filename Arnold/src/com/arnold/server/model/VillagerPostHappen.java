package com.arnold.server.model;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.arnold.server.model.base.BaseVillagerPostHappen;
import com.huntersun.tool.Utils;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class VillagerPostHappen extends BaseVillagerPostHappen<VillagerPostHappen> {
	public static final VillagerPostHappen dao = new VillagerPostHappen();
	public static final String tableName = "tb_villager_post_happen";
	
	/**
	 * @Description:保存村名岗位关系
	 * @author Li Bangming;
	 * @date 2017年6月8日 下午3:38:41
	 * @villagerPostIncome 村名产业收入对象
	 * @return
	 */
	public  boolean saveVillagerPostHappen(VillagerPostHappen villagerPostIncome) {
	    boolean isSave=	villagerPostIncome.save();
		return isSave;
	}
	/**
	 * @Description:查询最近一条记录
	 * @author Li Bangming;
	 * @date 2017年6月8日 下午3:38:41
	 * @villagerPostIncome 村名产业收入对象
	 * @return
	 */
	public static  VillagerPostHappen queryLastVillagerPostHappenByVillagerId(String villagerId) {
		String sql="select * from "+tableName+" tvp where tvp.createTime=(select max(createTime) from "+tableName+" where villagerId=?)";
		return dao.findFirst(sql,villagerId);
	}

	public static  Page<VillagerPostHappen> pageLastVillagerPostHappenByVillagerId(int pageNumber,int pageSize,
			String villagerId) {
		String sql="select * ";
		
		String sqlExceptSelect =  "from "+tableName+" tvp where tvp.createTime=(select max(createTime) "
				+ "from "+tableName+" where villagerId=?)";
		
		return dao.paginate(pageNumber, pageSize, sql, sqlExceptSelect, villagerId);
	}
	/**
	 * @Description:分页
	 * @author Li Bangming;
	 * @date 2017年7月5日 下午3:38:41
	 * @return
	 */
	public static Page<VillagerPostHappen>  pageVillagerPostHappen(int pageNumber,int pageSize,String villagerId,String postId){
		String select=" select tvpi.* ,(select tp.name from tb_post tp where tp.id=tvpi.postId) as postName";
		String sqlExceptSelect="   from "+tableName+" tvpi ";
		return dao.paginate(pageNumber, pageSize, select, sqlExceptSelect);
	}
	
	public static List<VillagerPostHappen>  getVilagerPostHappen(String villagerId){
		String sql="SELECT * FROM tb_villager_post_happen WHERE villagerId =? ORDER BY createTime DESC";
		return dao.find(sql,villagerId);
	}
	
	/**
	 * 获取类别就业信息
	 * @param familyId
	 * @param jobCategoryIds
	 * @return
	 */
	public List<Record> getPostInfos(String familyId, String jobCategoryIds, String year) {
		StringBuffer sql=new StringBuffer("SELECT "
		  +" tvph.jobCategory, "
		  +" COUNT(1) AS postCount, "
		  +" GROUP_CONCAT(tvph.jobAddress) AS jobAddresss, "
		  +" GROUP_CONCAT(DISTINCT tvph.postId) AS postIds "
//		  +" GROUP_CONCAT(tp.name) AS postNames "
		  +" FROM "
		  +" tb_villager_post_happen tvph, "
		  +" tb_villager tv "
//		  +" tb_post tp  "
		  +" WHERE tvph.villagerId = tv.id  "
//		  +" AND tvph.postId = tp.id  "
		  +" AND tv.isValid = ?  "
		  +" AND tv.familyId = ?  "
		  +" AND tvph.ralationType = ? ");
		if(!Utils.isBlankOrEmpty(jobCategoryIds)){
			String[] categoryIds = jobCategoryIds.split(",");
			sql.append(" AND tvph.jobCategory IN (");
			for(int i=0;i<categoryIds.length;i++){
				String categoryId = categoryIds[i];
				if(i == (categoryIds.length -1)){
					sql.append("'").append(categoryId).append("'");
				}else{
					sql.append("'").append(categoryId).append("',");
				}
			}
			sql.append(") ");
		}
		
		sql.append(" GROUP BY tvph.jobCategory ");
		
		return Db.find(sql.toString(), 0, familyId, 3);
	}
	
	public List<Record> getSalaryIncome(String familyId, String searchYear) {
		String sql = "SELECT "
			+ " tvph.postId,"
			+ " tvph.jobCategory,"
		    + " CONVERT(tvph.averageIncome*12, DECIMAL) AS income "
		    + " FROM "
		    + " tb_villager_post_happen tvph "
		    + " WHERE EXISTS "
		    + " (SELECT "
		    + " 1 "
		    + " FROM "
		    + " tb_villager tv "
		    + " WHERE tv.id = tvph.villagerId "
		    + " AND tv.familyId = ? "
		    + " AND tv.isValid = 0) "
		    + " AND tvph.createTime LIKE '"+searchYear+"%' "
			+ " GROUP BY tvph.jobCategory ";
		return Db.find(sql, familyId);
	}
	
	/**
	 * 获取家庭工资性收入
	 * @param pFamilyId
	 * @param pYear
	 * @return
	 */
	public double countYearSalaryByFamilyId(String pFamilyId, String pYear, String...jobCategoryIds) {
		int pYearNum = Integer.valueOf(pYear);
		double result = 0d;
		List<Object> reqParamList = new ArrayList<Object>();
		StringBuilder bSql = new StringBuilder("SELECT "
				+ " tvph.id,tvph.ralationType,tvph.averageIncome,tvph.postLeaveDate,tvph.postId,tvph.villagerId "
				+ " FROM tb_villager tv "
				+ " JOIN tb_villager_post_happen tvph ON tvph.villagerId = tv.id "
				+ " AND tvph.postLeaveDate IS NOT NULL AND tvph.averageIncome > 0 ");
		
		//就业类别
		if(null!=jobCategoryIds && jobCategoryIds.length>0){
			bSql.append(" AND (");
			for(int i=0;i<jobCategoryIds.length;i++){
				bSql.append(i==0?" tvph.jobCategory=?":" OR tvph.jobCategory=?");
				reqParamList.add(jobCategoryIds[i]);
			}
			bSql.append(" )");
		}
		
		bSql.append(" WHERE tv.isValid = ? AND tv.familyId =?");
		reqParamList.add(0);
		reqParamList.add(pFamilyId);
		
		//家庭上岗信息
		List<VillagerPostHappen> villagerPostInfos = dao.find(bSql.toString(), reqParamList.toArray());
		
		if(null!=villagerPostInfos && villagerPostInfos.size()>0){
			//整合每个成员的流水信息
			Map<String,List<VillagerPostHappen>> villagerInfos = new HashMap<String,List<VillagerPostHappen>>();
			for(VillagerPostHappen info : villagerPostInfos){
				if(villagerInfos.containsKey(info.getVillagerId())){
					List<VillagerPostHappen> ownlist = villagerInfos.get(info.getVillagerId());
					ownlist.add(info);
					villagerInfos.put(info.getVillagerId(), ownlist);
				}else{
					List<VillagerPostHappen> ownlist = new ArrayList<VillagerPostHappen>();
					ownlist.add(info);
					villagerInfos.put(info.getVillagerId(), ownlist);
				}
			}
			for(List<VillagerPostHappen> ownVillagerInfos : villagerInfos.values()){
				//处理每个家庭成员的流水情况
				List<VillagerPostHappen> isValidInfo = new ArrayList<VillagerPostHappen>();
				List<VillagerPostHappen> isNoUseInfo = new ArrayList<VillagerPostHappen>();
				for(VillagerPostHappen info : ownVillagerInfos){
					switch (info.getRalationType()) {
					case 1://申请
						break;
					case 2://取消
						break;
					case 3://上岗
						isValidInfo.add(info);
						break;
					case 4://辞退
						isNoUseInfo.add(info);
						break;
					case 5://辞职
						isNoUseInfo.add(info);
						break;
					default:
						break;
					}
				}
				
				//不考虑各个岗位区间有交集和脏数据的情况处理
				if(isValidInfo.size()>0 && isNoUseInfo.size()==0){//有上岗，无下岗
					for(VillagerPostHappen validInfo : isValidInfo){
						result += countVillagerSalary(validInfo, pYearNum, null);
					}
				}else if(isValidInfo.size()>0 && isNoUseInfo.size()>0){//有上岗，有下岗
					for(VillagerPostHappen validInfo : isValidInfo){
						VillagerPostHappen existNoUseInfo = null;
						for(VillagerPostHappen noUserInfo : isNoUseInfo){
							if(validInfo.getPostId().equals(noUserInfo.getPostId())){
								existNoUseInfo = noUserInfo;
							}
						}
						if(null==existNoUseInfo){
							//有上岗，无下岗
							result += countVillagerSalary(validInfo, pYearNum, null);
						}else{
							//上下岗属于同一个post
							Calendar endCalender = Calendar.getInstance();
							endCalender.setTime(existNoUseInfo.getPostLeaveDate());
							result += countVillagerSalary(validInfo, pYearNum, endCalender);
						}
					}
				}
			}
			
		}
		
		return result;
	}
	
	
	
	/**
	 * 获取岗位年工资
	 * @param info
	 * @param pYear 计算年度
	 * @param endDate 下岗时间（可选）
	 * @return
	 */
	private double countVillagerSalary(VillagerPostHappen info, int pYear, Calendar endDate){
		double result = 0d;
		if(null!=info.getPostLeaveDate() && info.getAverageIncome()>0){
			Calendar date = Calendar.getInstance();
			date.setTime(info.getPostLeaveDate());
			int year = date.get(Calendar.YEAR);
			if(year < pYear){
				//开始工作年度小于统计年度
				if(null!=endDate){
					int endYear = endDate.get(Calendar.YEAR);
					if(pYear<endYear){
						//结束工作年度大于统计年度
						result += info.getAverageIncome()*12d;
					}else if(pYear==endYear){
						//结束工作年度等于统计年度
						int count = endDate.get(Calendar.MONTH);//离职当月计工资
						result += info.getAverageIncome()*count;
					}
				}else{
					result += info.getAverageIncome()*12d;
				}
			}else if(year == pYear){
				//开始工作年度等于统计年度
				if(null!=endDate){
					int endYear = endDate.get(Calendar.YEAR);
					int startMonth = date.get(Calendar.MONTH);
					if(pYear<endYear){
						//结束工作年度大于统计年度
						int count = 12 - startMonth;//入职当月不计工资
						result += info.getAverageIncome()*count;
					}else if(pYear==endYear){
						//结束工作年度等于统计年度
						int endMonth = endDate.get(Calendar.MONTH);
						if(endMonth>startMonth){
							int count = endMonth - startMonth;//入职当月不计工资
							result += info.getAverageIncome()*count;
						}
					}
				}else{
					int count = 12 - date.get(Calendar.MONTH);//入职当月不计工资
					result += info.getAverageIncome()*count;
				}
			}
		}
		return result;
	}
	
}
