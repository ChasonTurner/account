package com.arnold.server.model;

import com.arnold.server.model.base.BaseArnold;
import com.arnold.server.util.QueryBaseUtil;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Arnold extends BaseArnold<Arnold> {
	public static final Arnold dao = new Arnold();

	/*public Page<Record> pageMember(Integer pageNumber, Integer pageSize, String accreditPostId, String accreditPlace,
			String organizationId, String postId, String groupId, String accreditStart, String accreditEnd,
			Date birthday, String politicalStatusId) {

		// 多条件查询

		String sql = "SELECT *";
		String sqlExceptSelect = " from tb_member tm LEFT JOIN tb_accredited ta on ta.memberId=tm.id and ta.isValid>=?"
				+ " WHERE tm.isValid>=?";

		return Db.paginate(pageNumber, pageSize, sql, sqlExceptSelect, 0, 0);
	}*/

	public Record findMember(String memberId) {

		String sql = "SELECT ta.*,tm.* FROM (SELECT * from tb_member WHERE id=? and isValid>=?) as tm LEFT JOIN "
				+ "(SELECT * FROM tb_accredited WHERE memberId=? and isValid>=?) as ta on ta.memberId=tm.id";

		return Db.findFirst(sql, memberId, 0, memberId, 0);
	}

	public Page<Record> pageFamily(Integer pageNumber, Integer pageSize,Map<String, Object> searchMaps) {

		// 未排序

		/*
		 * String sql = "SELECT tf.id,tf.number,tf.regionId," +
		 * "tv.name,tv.IDnumber,tv.raceId," + "tfb.burdenId," + "tfm.measureId," +
		 * "tfp.ralationTypeId," + "tmf.memberId," + "cv.villagerCount," +
		 * "tr.shortName as groupName,tr.parentId as hamletId"; String sqlExceptSelect =
		 * " from tb_family tf LEFT JOIN tb_villager tv ON tf.villagerId=tv.id AND tf.isValid=?"
		 * + " LEFT JOIN tb_family_burden_relation tfb ON tv.familyId=tfb.familyId" +
		 * " LEFT JOIN tb_family_measure_relation tfm ON tv.familyId=tfm.familyId" +
		 * " LEFT JOIN tb_family_poverty_happen tfp ON tv.familyId=tfp.fmailyId" +
		 * " LEFT JOIN tb_member_family_relation tmf ON tv.familyId=tmf.familyId " +
		 * " LEFT JOIN (SELECT COUNT(1) as villagerCount,familyId FROM tb_villager GROUP BY familyId)cv ON cv.familyId=tv.familyId"
		 * +
		 * " LEFT JOIN tb_region tr ON tr.id=tf.regionId AND tr.isValid=?"
		 * ;
		 */

		String sql = "SELECT tf.id,tf.number,tf.ralationTypeId,tf.familyPropertyId,tf.phone,"
				+ "tv.name as householderName,tv.IDnumber,tv.raceId,"
				+ "group_concat(DISTINCT tfbr.burdenId) AS burdenId,"
				+ "group_concat(DISTINCT tfmr.measureId) AS measureId,"
				+ "group_concat(DISTINCT tmfr.leaderId) AS memberId,"

				+ "group_concat(DISTINCT tm.name) AS memberName,"
				+ "cv.villagerCount,"
				+ "tr.id AS regionId,tr.shortName,tr.parentId,tr.parentName";
				//+ "concat_ws('-',select tr.shortName where tr.Id=tr.parentId,tr.shortName) AS regionName";

		String sqlExceptSelect = " FROM tb_family tf"
				+ " LEFT JOIN tb_villager tv ON tf.villagerId=tv.id AND tf.isValid>=?"
				+ " LEFT JOIN tb_family_burden_relation tfbr ON tfbr.familyId=tf.id"
				+ " LEFT JOIN tb_family_measure_relation tfmr ON tfmr.familyId=tf.id"
				+ " LEFT JOIN tb_leader_region_relation tmfr ON tmfr.isValid=tf.isValid and tmfr.regionId=tf.regionId"
				+ " LEFT JOIN tb_leader tm ON tm.id=tmfr.leaderId AND tm.isValid>=?"
				
				+ " LEFT JOIN (SELECT COUNT(1) as villagerCount,familyId FROM tb_villager where tb_villager.isValid=0 GROUP BY familyId)cv ON cv.familyId=tf.id"
				+ " LEFT JOIN tb_region tr ON tr.id=tf.regionId AND tr.isValid>=?"
				+ " WHERE tf.isValid>=?";

		if (searchMaps != null && !searchMaps.isEmpty()) {
			for(Entry<String, Object> e:searchMaps.entrySet()){
				sqlExceptSelect += " and " + e.getKey() + e.getValue();
			}
		}
		sqlExceptSelect += " GROUP BY tf.id ORDER BY tf.createTime DESC";
		return Db.paginate(pageNumber, pageSize, sql, sqlExceptSelect,0, 0, 0, 0);
	}

	public Page<Record> pageFamilymember(Integer pageNumber, Integer pageSize, String familyId) {
		// TODO Auto-generated method stub
		String sql = "SELECT *";
		String sqlExceptSelect = " from tb_villager where familyId=? and isValid=0";

		return Db.paginate(pageNumber, pageSize, sql, sqlExceptSelect, familyId);
	}

	public Page<Record> pageLeader(Integer pageNumber, Integer pageSize) {
		// TODO Auto-generated method stub
		String sql = "SELECT *";
		String sqlExceptSelect = " from tb_leader";

		return Db.paginate(pageNumber, pageSize, sql, sqlExceptSelect);
	}

	public Record findFamily(String id) {
		/*
		 * String sql =
		 * "SELECT tf.id,tf.number,tf.regionId,tf.writer,tf.createTime,tf.time,tf.operator,tf.operatorTime,tf.planeTime,tf.aspirationId,tf.remark,tf.addReason,"
		 * +
		 * "tv.raceId,tv.name,tv.IDnumber,tv.sexId,tv.birthday,tv.laborCapacityId,tv.educationalId,tv.healthConditionId,tv.laborStatusId,tv.laborTimeId,maritalStatusId,"
		 * + "tfb.burdenId," + "tfm.measureId," + "tfp.ralationTypeId," +
		 * "tfs.soldierDepentantId," + "tfi.insuranceId," + "tmf.memberId," +
		 * "tr.shortName as groupName,tr.parentId as hamletId"
		 * 
		 * + " from tb_family tf LEFT JOIN tb_villager tv ON tf.villagerId=tv.id" +
		 * " LEFT JOIN tb_family_burden_relation tfb ON tv.familyId=tfb.familyId " +
		 * " LEFT JOIN tb_family_measure_relation tfm ON tv.familyId=tfm.familyId" +
		 * " LEFT JOIN tb_family_poverty_happen tfp ON tv.familyId=tfp.fmailyId" +
		 * " LEFT JOIN tb_family_soldierdepentant_relation tfs ON tv.familyId=tfs.familyId"
		 * + " LEFT JOIN tb_family_insurance_relation tfi ON tv.familyId=tfi.familyId" +
		 * " LEFT JOIN tb_member_family_relation tmf ON tv.familyId=tmf.familyId" +
		 * " LEFT JOIN tb_region tr ON tr.id=tf.regionId AND tr.isValid=?"
		 * + " WHERE tf.id=?";
		 */

		/*String sql = "SELECT tf.id,tf.number,tf.regionId,tf.writer,tf.createTime,tf.time,tf.operator,tf.operatorTime,tf.planeTime,tf.ralationTypeId,tf.aspirationId,tf.remark,tf.addReason,"
				+ "tv.raceId,tv.name,tv.IDnumber,tv.sexId,tv.birthday,tv.laborCapacityId,tv.educationalId,tv.healthConditionId,tv.laborStatusId,tv.laborTimeId,tv.maritalStatusId,"
				+ "group_concat(DISTINCT tfbr.burdenId) AS burdenId,"
				+ "group_concat(DISTINCT tfmr.measureId) AS measureId,"
				+ "group_concat(DISTINCT tfsr.soldierDepentantId) AS soldierDepentantId,"
				+ "group_concat(DISTINCT tfir.insuranceId) AS insuranceId,"
				+ "group_concat(DISTINCT tmfr.memberId) AS memberId,"
				+ "tr.shortName as groupName,tr.parentId as hamletId"
				//+ "tr.id AS regionId,tr.shortName,tr.parentId,tr.parentName"

				+ " FROM tb_family tf" + " LEFT JOIN tb_villager tv ON tf.villagerId=tv.id"
				+ " LEFT JOIN tb_family_burden_relation tfbr ON tfbr.familyId=tf.id"
				+ " LEFT JOIN tb_family_measure_relation tfmr ON tfmr.familyId=tf.id"
				+ " LEFT JOIN tb_family_soldierdepentant_relation tfsr ON tfsr.familyId=tf.id"
				+ " LEFT JOIN tb_family_insurance_relation tfir ON tfir.familyId=tf.id"
				+ " LEFT JOIN tb_member_family_relation tmfr ON tmfr.familyId=tf.id"
				+ " LEFT JOIN tb_region tr ON tr.id=tf.regionId AND tr.isValid=?"
				+ " WHERE tf.id=? AND tf.isValid>=?" + " GROUP BY tf.id" + " ORDER BY tf.createTime DESC";*/

		String sql = "SELECT tf.phone,tf.id,tf.number,tf.regionId,tf.writer,tf.createTime,"
				+ "tf.time as helpTime,"//帮扶日期
				+ "tf.operator,tf.operatorTime,tf.planeTime,tf.ralationTypeId,tf.aspirationId,tf.remark,tf.addReason,tf.familyPropertyId,"
				+ "tv.raceId,tv.name,tv.IDnumber,tv.sexId,tv.birthday,tv.laborCapacityId,tv.educationalId,tv.healthConditionId,tv.laborStatusId,tv.laborTimeId,tv.maritalStatusId,"
				+ "group_concat(DISTINCT tfbr.burdenId) AS burdenId,"
				+ "group_concat(DISTINCT tfmr.measureId) AS measureId,"
				+ "group_concat(DISTINCT tl.id) AS leaderId,"
				+ "group_concat(DISTINCT tl.name) AS leaderName,"
				
				
				+ " tv.isSeriousPatient,"//是否有重病人员
				+ " tf.isOnlyChild,"//是否独生子女
				+ " tf.isDropout,"//是否有辍学学生
				+ " tv.soldiersDependentsId,"//军属
				+ " tv.insuranceId,"//养老保险
				+ " tv.medicalInsuranceId,"//医疗保险
				+ " tf.addReason,"//添加原因
				+ " tf.remark,"//备注
				
				
				+ "tr.id AS administrativeRegionId,tr.shortName,tr.parentId,tr.parentName"

				+ " FROM tb_family tf" + " LEFT JOIN tb_villager tv ON tf.villagerId=tv.id"
				+ " LEFT JOIN tb_family_burden_relation tfbr ON tfbr.familyId=tf.id"
				+ " LEFT JOIN tb_family_measure_relation tfmr ON tfmr.familyId=tf.id"
				+ " LEFT JOIN tb_leader_region_relation tlrr ON tlrr.regionId=tf.regionId"
				+ " LEFT JOIN tb_leader tl ON tl.id=tlrr.leaderId AND tl.isValid>=?"
				+ " LEFT JOIN tb_region tr ON tr.id=tf.regionId AND tr.isValid=?"
				+ " WHERE tf.id=? AND tf.isValid>=?" + " GROUP BY tf.id" + " ORDER BY tf.createTime DESC";
		
		return Db.findFirst(sql,0, 0, id, 0);
	}

	/**
	 * @Author PanChangGui
	 * @Time 2017年10月7日 下午4:34:33
	 * @Description 
	 */
	public Page<Record> pageMemberFamily(String memberId, Integer pageNumber, Integer pageSize) {
		// 未排序
		// 查家庭成员时判断isValid，家庭成员可能被删
		// relation表一对多的情况

		/*String sql = "SELECT tf.number,tf.regionId,tf.time,tf.endTime,"
				+ "tv.name,tv.IDnumber,tv.raceId,"
				+ "cv.villagerCount,"
				+ "GROUP_CONCAT(DISTINCT tfbr.burdenId) AS burdenId,"
				+ "GROUP_CONCAT(DISTINCT tfmr.measureId) AS measureId,"
				+ "tfs.povertyStatus,"
				+ "tr.shortName as groupName,tr.parentId as hamletId,"
				+ "tf.addReason as addReason,"
				+ "tmfr.familyId ";

		String sqlExceptSelect = " FROM tb_member_family_relation tmfr"
				+ " LEFT JOIN tb_family tf ON tmfr.familyId=tf.id" + " LEFT JOIN tb_villager tv ON tv.id=tf.villagerId"
				+ " LEFT JOIN (SELECT COUNT(1) as villagerCount,familyId FROM tb_villager GROUP BY  familyId )  cv ON cv.familyId=tf.id"
				+ " LEFT JOIN tb_family_burden_relation tfbr ON tfbr.familyId=tf.id"
				+ " LEFT JOIN tb_family_measure_relation tfmr ON tfmr.familyId=tf.id"
				+ " LEFT JOIN tb_family_status tfs ON tfs.familyId=tf.id"
				+ " LEFT JOIN tb_region tr ON tr.id=tf.regionId AND tr.isValid=?"
				+ " WHERE tmfr.memberId=?"
				+ " GROUP BY tf.id"
				+ " ORDER BY tf.createTime DESC";
		Page<Record> page = Db.paginate(pageNumber, pageSize, sql, sqlExceptSelect, 0, memberId);
		List<Record> recordList = page.getList();
		String regionSql = "select * from tb_region where  isValid=0";
		List<Region> regionList = Region.dao.find(regionSql);
		for (Record record : recordList) {
			String regionId = record.get("regionId");
			record.set("regionsName", getRegionsName(regionId, regionList, ""));
		}*/
		
		String sql = "SELECT tf.number,tf.id AS familyId,tf.ralationTypeId,"
				+ "tv.name,tv.IDnumber,tv.raceId,"
				+ "cv.villagerCount,"
				+ "GROUP_CONCAT(DISTINCT tfbr.burdenId) AS burdenId,"
				+ "GROUP_CONCAT(DISTINCT tfmr.measureId) AS measureId,"
				+ "tr.shortName,tr.parentName,tr.id AS administrativeRegionId,tr.parentId,"
				+ "tmfr.startTime, tmfr.endTime";

		String sqlExceptSelect = " FROM tb_member_family_relation tmfr"
				+ " LEFT JOIN tb_family tf ON tmfr.familyId=tf.id"
				+ " LEFT JOIN tb_villager tv ON tv.id=tf.villagerId"
				+ " LEFT JOIN (SELECT COUNT(1) as villagerCount,familyId FROM tb_villager GROUP BY  familyId )  cv ON cv.familyId=tf.id"
				+ " LEFT JOIN tb_family_burden_relation tfbr ON tfbr.familyId=tf.id"
				+ " LEFT JOIN tb_family_measure_relation tfmr ON tfmr.familyId=tf.id"
				+ " LEFT JOIN tb_region tr ON tr.id=tf.regionId AND tr.isValid=?"
				+ " WHERE tmfr.memberId=?"
				+ " GROUP BY tf.id"
				+ " ORDER BY tmfr.createTime DESC";
		Page<Record> page = Db.paginate(pageNumber, pageSize, sql, sqlExceptSelect, 0, memberId);
		
		return page;
	}
	
	@SuppressWarnings("unused")
	private String getRegionsName(String regionId, List<Region> recordList, String name) {
		for (Region region : recordList) {
			if (region.getId().equals(regionId)) {
				return region.getParentName() + "-" + region.getFullName();
			}
		}
		return "";
	}
	
	public Page<Record> pageMemberFamilyHappen(String memberId, Integer pageNumber, Integer pageSize) {
		String sql = "SELECT "
				+ " tf.id AS familyId,tf.number,tf.ralationTypeId,"
				+ "tv.name,tv.IDnumber,tv.raceId,"
				+ "cv.villagerCount,"
				+ "GROUP_CONCAT(DISTINCT tfbr.burdenId) AS burdenId,"
				+ "GROUP_CONCAT(DISTINCT tfmr.measureId) AS measureId,"
				+ "tr.id AS administrativeRegionId,tr.shortName,tr.parentId,tr.parentName,"
				+ "tmfh.startTime,tmfh.endTime";

		String sqlExceptSelect = " FROM tb_member_family_happen tmfh"
				+ " LEFT JOIN tb_family tf ON tf.id=tmfh.familyId "
				+ " LEFT JOIN tb_villager tv ON tv.id=tf.villagerId"
				+ " LEFT JOIN (SELECT COUNT(1) as villagerCount,familyId FROM tb_villager GROUP BY  familyId )  cv ON cv.familyId=tf.id"
				+ " LEFT JOIN tb_family_burden_relation tfbr ON tfbr.familyId=tf.id"
				+ " LEFT JOIN tb_family_measure_relation tfmr ON tfmr.familyId=tf.id"
				+ " LEFT JOIN tb_region tr ON tr.id=tf.regionId AND tr.isValid>=?"
				+ " WHERE tmfh.memberId=? AND tmfh.isValid>=?"
				+ " GROUP BY tmfh.id"
				+ " ORDER BY tmfh.createTime DESC";
		Page<Record> page = Db.paginate(pageNumber, pageSize, sql, sqlExceptSelect, 0, memberId,0);
		
		return page;
	}

	public Page<Record> pageMemeberCommendInfo(String memberId, Integer pageNumber, Integer pageSize) {
		//////////////////////////////
		String sql = "SELECT *";
		String sqlExceptSelect = " from tb_member_family_relation";

		return Db.paginate(pageNumber, pageSize, sql, sqlExceptSelect);
	}

	public Page<Record> pageMemeberEffect(String memberId, Integer pageNumber, Integer pageSize) {
		// TODO Auto-generated method stub
		/*
		 * String sql = "SELECT *"; String sqlExceptSelect =
		 * " from tb_member_family_relation tm LEFT JOIN tb_family tf on tm.familyId=tf.id where tm.memberId=?"
		 * ;
		 */

		/*String sql = "SELECT vi.`name`,"
				+ "ph.ralationTypeId,"
				+ "br.burdenId,"
				+ "tfmr.measureId,"
				+ "sih.income,"
				+ "fmr.createTime,"
				+ "fmr.updateTime,"
				+ "tf.id,"
				+ "tmfr.familyId,"
				+ "tr.id,tr.shortName,tr.parentId,tr.parentName";
		String sqlExceptSelect = " FROM tb_member_family_relation tmfr "
				+ " LEFT JOIN tb_family tf ON tf.id = tmfr.familyId"
				+ " LEFT JOIN tb_family_status tfs ON tfs.familyId = tf.id "
				+ " LEFT JOIN tb_family_measure_relation tfmr ON tfmr.familyId = tf.id "
				+ " LEFT JOIN tb_family_burden_relation br on br.familyId = tf.id "
				+ " LEFT JOIN tb_family_poverty_happen ph ON ph.fmailyId = tf.id "
				+ " LEFT JOIN tb_family_shift_income_happen sih ON sih.fmailyId = tf.id "
				+ " INNER JOIN tb_region tr ON tr.id=tf.regionId"
				+ " LEFT JOIN tb_villager vi ON vi.id = tf.villagerId " + " WHERE tfr.memberId = ? "
				+ " GROUP BY tf.id";*/
		
		/*String sql = "SELECT tv.`name`,"
				+ "GROUP_CONCAT(DISTINCT tfbr.burdenId) AS burdenId,"
				+ "GROUP_CONCAT(DISTINCT tfmr.measureId) AS measureId,"
				+ "tmfr.createTime,"
				+ "tmfr.updateTime,"
				+ "tf.id AS familyId,tf.ralationTypeId,tf.familyPropertyId,"
				+ "tr.id AS regionId,tr.shortName,tr.parentId,tr.parentName";
		String sqlExceptSelect = " FROM tb_member_family_relation tmfr "
				+ " LEFT JOIN tb_family tf ON tf.id = tmfr.familyId"
				+ " LEFT JOIN tb_family_measure_relation tfmr ON tfmr.familyId=tf.id"
				+ " LEFT JOIN tb_family_burden_relation tfbr on tfbr.familyId = tf.id"
				+ " LEFT JOIN tb_region tr ON tr.id=tf.regionId"
				+ " LEFT JOIN tb_villager tv ON tv.id = tf.villagerId "
				+ " WHERE tmfr.memberId=?"
				+ " GROUP BY tf.id";*/
			
		String sql = "SELECT tv.`name`,"
				+ "GROUP_CONCAT(DISTINCT tfbr.burdenId) AS burdenId,"
				+ "GROUP_CONCAT(DISTINCT tfmr.measureId) AS measureId,"
				+ "tmfr.startTime,tmfr.endTime,"
				+ "tf.id AS familyId,tf.ralationTypeId,tf.familyPropertyId,"
				+ "tr.id AS administrativeRegionId,tr.shortName,tr.parentId,tr.parentName,"
				+ "tsfi.averageIncome,"
				+ "tmfr.startTime, tmfr.endTime";
		String sqlExceptSelect = " FROM tb_member_family_relation tmfr "
				+ " INNER JOIN tb_family tf ON tf.id = tmfr.familyId"
				+ " LEFT JOIN tb_family_measure_relation tfmr ON tfmr.familyId=tf.id"
				+ " LEFT JOIN tb_family_burden_relation tfbr on tfbr.familyId = tf.id"
				+ " LEFT JOIN tb_region tr ON tr.id=tf.regionId"
				+ " LEFT JOIN tb_villager tv ON tv.id = tf.villagerId "
				+ " LEFT JOIN tb_static_family_income tsfi ON tsfi.familyId=tmfr.familyId"
				+ " WHERE tmfr.memberId=? AND tmfr.isValid>=?"
				+ " GROUP BY tf.id"
				+ " ORDER BY tmfr.createTime DESC";
		return Db.paginate(pageNumber, pageSize, sql, sqlExceptSelect, memberId,0);
	}

	public Page<Record> pageMemeberEmployment(String memberId, Integer pageNumber, Integer pageSize) {
		// TODO Auto-generated method stub
		/*String sql = "SELECT vi.`name`,vi.IDnumber,vi.sexId,vi.phone,"
				+ "tf.id AS familyId,tf.number,"
				+ "tvph.jobCategory,"
				+ "tvph.postId,tvph.companyProject,tvph.averageIncome,tvph.ralationType,tvph.postLeaveDate,"
				+ "tr.id AS administrativeRegionId,tr.shortName,tr.parentId,tr.parentName";
		String sqlExceptSelect = " FROM tb_member_family_relation fr "
				+ " INNER JOIN tb_family tf ON tf.id = fr.familyId "
				+ " INNER JOIN tb_villager vi ON vi.familyId = tf.id "
				+ " INNER JOIN tb_region tr ON tr.id=tf.regionId"
				+ " INNER JOIN (select * from tb_villager_post_happen tvph where tvph.createTime=(select MAX(createTime) "
				+ " from tb_villager_post_happen cc where cc.villagerId = tvph.villagerId)) tvph on vi.id=tvph.villagerId "
				+ " WHERE fr.memberId = ?";*/
		
		String sql = "SELECT tv.`name`,tv.IDnumber,tv.sexId,tv.phone,"
				+ "tf.id AS familyId,tf.number,"
				+ "tvph.jobCategory,"
				+ "tvph.postId,tvph.companyProject,tvph.averageIncome,tvph.ralationType,tvph.postLeaveDate,"
				+ "tr.id AS administrativeRegionId,tr.shortName,tr.parentId,tr.parentName";
		String sqlExceptSelect = " FROM tb_villager_post_happen tvph "
				+ " INNER JOIN tb_villager tv ON tv.id = tvph.villagerId "
				+ " INNER JOIN tb_family tf ON tf.id = tv.familyId "
				+ " INNER JOIN tb_region tr ON tr.id=tf.regionId"
				+ " WHERE tvph.memberId=?";
		
		return Db.paginate(pageNumber, pageSize, sql, sqlExceptSelect, memberId);
	}

	/**
	 * @Author PanChangGui
	 * @Time 2017年10月8日 下午2:28:33
	 * @Description 
	 */
	public Page<Record> pageMemberTrain(String memberId, Integer pageNumber, Integer pageSize) {
		// TODO Auto-generated method stub
		/*
		 * String sql = "SELECT *"; String sqlExceptSelect =
		 * " from tb_member_family_relation tm LEFT JOIN tb_family tf on tm.familyId=tf.id where tm.memberId=?"
		 * ;
		 */

		/*String sql = "SELECT vi.`name`,vi.IDnumber,vi.sexId,"
				+ "tf.phone,tf.number,"
				+ "tt.`name` AS trainName,tt.postId,tt.content,tt.startTime,tt.endTime,"
				+ "vi.familyId,"
				+ "tr.id,tr.shortName,tr.parentId,tr.parentName";
		String sqlExceptSelect = " FROM tb_train_participant tp "
				+ " INNER JOIN tb_train tt ON tt.id = tp.trainid "
				+ " INNER JOIN tb_villager vi ON vi.id = tp.joinPersonid "
				+ " INNER JOIN tb_family tf ON tf.id = vi.familyId "
				+ " INNER JOIN tb_region tr ON tr.id=tf.regionId"
				+ " WHERE tt.isValid=0 and tp.helpPersonid = ?";*/
		
		String sql = "SELECT vi.`name`,vi.IDnumber,vi.sexId,vi.phone,"
				+ "tf.number,tf.id AS familyId,"
				+ "tt.`name` AS trainName,tt.postId,tt.content,tt.startTime,tt.endTime,"
				+ "tr.id AS administrativeRegionId,tr.shortName,tr.parentId,tr.parentName";
		String sqlExceptSelect = " FROM tb_train_participant tp "
				+ " INNER JOIN tb_train tt ON tt.id = tp.trainid "
				+ " INNER JOIN tb_villager vi ON vi.id = tp.joinPersonid "
				+ " INNER JOIN tb_family tf ON tf.id = vi.familyId "
				+ " INNER JOIN tb_region tr ON tr.id=tf.regionId"
				+ " WHERE tt.isValid=0 and tp.helpPersonid = ?";
		
		return Db.paginate(pageNumber, pageSize, sql, sqlExceptSelect, memberId);
	}

	public Page<Record> pageMemberEdu(String memberId, Integer pageNumber, Integer pageSize) {
		// TODO Auto-generated method stub
		/*
		 * String sql = "SELECT *"; String sqlExceptSelect =
		 * " from tb_member_family_relation tm LEFT JOIN tb_family tf on tm.familyId=tf.id where tm.memberId=?"
		 * ;
		 */

		String sql = "SELECT vi.`name`,vi.IDnumber,vi.sexId,vi.phone,"
				+ "tf.number,tf.id AS familyId,"
				+ "tt.className,tt.typeId,tt.major,tt.startTime,tt.endTime,"
				+ "tr.id AS administrativeRegionId,tr.shortName,tr.parentId,tr.parentName";
		String sqlExceptSelect = " FROM tb_education_participant tp "
				+ " INNER JOIN tb_education tt ON tt.id = tp.educationid "
				+ " INNER JOIN tb_villager vi ON vi.id = tp.joinPersonid "
				+ " INNER JOIN tb_family tf ON tf.id = vi.familyId "
				+ " INNER JOIN tb_region tr ON tr.id=tf.regionId"
				+ " WHERE tp.helpPersonid = ?";
		return Db.paginate(pageNumber, pageSize, sql, sqlExceptSelect, memberId);
	}

	public Page<Record> pageIndustries(String memberId, Integer pageNumber, Integer pageSize, 
			String plantTypeId, String breedTypeId) {
		String select = "SELECT  tf.id AS familyId,tr.parentName AS hamletName,tr.shortName AS groupName,tf.number, "
				+ "tv.name AS villagerName, "
				+ "("
				+ " SELECT GROUP_CONCAT(DISTINCT tfeph.typeId) "
				+ " FROM tb_family_economic_purchase_happen tfeph WHERE tfeph.familyId = tf.id AND tfeph.parentTypeId='"
				+ plantTypeId + "' "
				+ ") AS plantTypeIds,"
				+ "IFNULL(("
				+ " SELECT CONVERT(SUM(IFNULL(tfeph.underwritingAmount,0)),DECIMAL) "
				+ " FROM tb_family_economic_purchase_happen tfeph WHERE tfeph.familyId = tf.id AND tfeph.parentTypeId='"
				+ plantTypeId + "' "
				+ "),0) AS plantAreas,"
				+ "("
				+ " SELECT GROUP_CONCAT(DISTINCT tfeph.typeId) "
				+ " FROM tb_family_economic_purchase_happen tfeph WHERE tfeph.familyId = tf.id AND tfeph.parentTypeId='"
				+ breedTypeId + "' "
				+ ") AS breedTypeIds,"
				+ "IFNULL(("
				+ " SELECT CONVERT(SUM(IFNULL(tfeph.underwritingAmount,0)),DECIMAL) FROM tb_family_economic_purchase_happen tfeph "
				+ " WHERE tfeph.familyId = tf.id AND tfeph.parentTypeId='"+breedTypeId+"' "
				+ "),0) AS breedCounts,"
				+ " IFNULL(("
				+ " SELECT CONVERT(SUM(IFNULL(tfeph.price,0)+IFNULL(ti.costUnitPrice,0)),DECIMAL) "
				+ " FROM tb_family_economic_purchase_happen tfeph"
				+ " LEFT JOIN tb_industry ti ON ti.typeId = tfeph.typeId WHERE tfeph.familyId = tf.id"
				+ "),0) AS costTotal,"
				+ "IFNULL(CONVERT((("
				+ " SELECT SUM(IFNULL(tfessh.price,0)) FROM tb_family_economic_self_sale_happen tfessh WHERE tfessh.familyId = tf.id	"
				+ ") + ("
				+ " SELECT SUM(IFNULL(tfeuh.price,0)) FROM tb_family_economic_underwriting_happen tfeuh WHERE tfeuh.familyId = tf.id"
				+ ")),DECIMAL),0) AS incomeToTal ";
		String sqlExceptSelect = " FROM tb_family tf "
				+ " LEFT JOIN tb_region tr ON tr.id = tf.regionId AND tr.isValid = tf.isValid AND tr.regionType = 6"
				+ " JOIN tb_villager tv ON tv.id = tf.villagerId AND tv.isValid = tf.isValid"
				+ " WHERE tf.isValid = ? "
				+ " AND EXISTS ("
				+ " SELECT 1 FROM tb_member_family_relation tmfr "
				+ " where tmfr.familyId=tf.id and tmfr.isValid = tf.isValid and tmfr.memberId=?"
				+ ")";
		
		return Db.paginate(pageNumber, pageSize, select, sqlExceptSelect, 0, memberId);
	}

	public Record findDesignatedHelpingVillageInfo(String villageId) {

		/*
		 * String sql =
		 * "SELECT ta.*,tm.* FROM (SELECT * from tb_member WHERE id=?) as tm LEFT JOIN "
		 * + "(SELECT * FROM tb_accredited WHERE memberId=?) as ta on ta.memberId=tm.id"
		 * ;
		 */

		// 还需要关联其它表查询其它字段
		// String sql = "SELECT * from " + tableName + " where id=?";

		// return Db.findFirst(sql, villageId);

		String sql = "SELECT tlrr.leaderId,tl.helperTypeId,tri.regionId,tri.povertyTypeId,tri.count,tri.population,"
				+ "tl.operator AS `recordOperatorId`, GROUP_CONCAT(DISTINCT tr.shortName) AS groupNames,tri.groupCount,"
				+ "tl.orgId,tri.assignDate,tri.createTime, tlv.operatorId,tlv.operateTime,tri.remark  "
				+ "FROM tb_region_info tri "
				+ "LEFT JOIN tb_leader_region_relation tlrr ON tlrr.regionId = tri.regionId "
				+ "LEFT JOIN tb_leader tl ON tl.id = tlrr.leaderId "
				+ "LEFT JOIN tb_locate_village tlv ON tlv.regionId = tri.regionId "
				+ "LEFT JOIN tb_region tr ON tr.parentId = tri.regionId " + "WHERE tri.regionId = ?";

		return Db.findFirst(sql, villageId);
	}

	public Record findDesignatedHelpingVillageInfo1(String villageId) {
		String sql = "SELECT tri.regionId AS regionId, r.fullName, tri.povertyTypeId, tri.population, tri.count, " +
				"tri.groupCount, tri.assignDate, tri.remark,tri.updateTime,tri.createTime,tri.operator,group_concat(DISTINCT tl.id) AS leaderIds, group_concat(DISTINCT tl.`name`) " +
				"AS leaderName, group_concat(DISTINCT tl.orgId) AS orgIds, group_concat(DISTINCT tl.helperTypeId) AS helperTypeIds, " +
				"group_concat(DISTINCT tm.`name`) AS memberNames, group_concat(DISTINCT tm.id) AS memberIds, group_concat(DISTINCT r1.id) AS zuCount " +
				"FROM tb_region_info tri LEFT JOIN tb_leader_region_relation tlrr ON tri.regionId = tlrr.regionId AND tlrr.isValid >= 0 " +
				"LEFT JOIN tb_leader tl ON tl.id = tlrr.leaderId AND tl.isValid >= 0 LEFT JOIN tb_member_region_relation tmrr ON " +
				"tmrr.regionId = tri.regionId AND tmrr.isValid >= 0 LEFT JOIN tb_member tm ON tm.id = tmrr.memberId AND tm.isValid >= 0 " +
				"LEFT JOIN tb_region r ON tri.regionId = r.id LEFT JOIN tb_region r1 ON tri.regionId = r1.parentId WHERE r.regionType = 5 " +
				"AND tlrr.id IS NOT NULL AND tri.regionId = ? GROUP BY tri.regionId";

		return Db.findFirst(sql, villageId);
	}

	public Page<Record> pageLeaderMemberInfo(String villageId, Integer pageNumber, Integer pageSize) {

		return null;
	}

	public Record findLeader(String leaderId) {
		final String tableName = "tb_leader";
		String sql = "SELECT * from " + tableName + " where id=?";
		return Db.findFirst(sql, leaderId);
	}

	public Page<Record> pageFamilyResponsible(String familyId, Integer pageNumber, Integer pageSize) {
		
		/*String sql = "SELECT tm.name,tm.sexId,tm.phone,tm.politicalStatusId,"
				+ " tm.accreditPostId,tm.accreditPlaceId,tm.accreditDepartmentId,tm.accreditStart,tm.accreditEnd";
		String sqlExceptSelect = " FROM tb_member_family_relation tmfr"
				+ " INNER JOIN tb_member tm ON tm.id=tmfr.memberId"
				+ " WHERE tmfr.familyId=? AND tmfr.isValid>=?";*/
		
		String sql = "SELECT tl.name,tl.sexId,tl.phone,tl.politicalStatusId,tl.orgId,"
				+ " tri.assignDate,tri.assignEndDate";
		
		String sqlExceptSelect = " FROM tb_family tf"
				+ " INNER JOIN tb_leader_region_relation tlrr ON tlrr.regionId=tf.regionId"
				+ " LEFT JOIN tb_region_info tri ON tri.regionId=tlrr.regionId AND tri.isValid>=?"
				+ " INNER JOIN tb_leader tl ON tl.id=tlrr.leaderId AND tl.isValid>=?"
				+ " WHERE tf.id=? AND tf.isValid>=?";
		
		return Db.paginate(pageNumber, pageSize, sql, sqlExceptSelect,0, 0,familyId, 0);
	}

	/*public Page<Record> pageFamilyPovertyPropertyRecord(String familyId, Integer pageNumber, Integer pageSize) {
		String sql = "SELECT tfph.ralationTypeId,tfph.remark,tm.name";
		String sqlExceptSelect = " from tb_family_poverty_happen tfph LEFT JOIN tb_member_family_relation tmfr ON tfph.fmailyId=tmfr.familyId "
				+ "LEFT JOIN tb_member tm ON tmfr.memberId=tm.id WHERE tfph.fmailyId=?";

		return Db.paginate(pageNumber, pageSize, sql, sqlExceptSelect, familyId);
	}*/

	public Page<Record> pageStayingVillage(Integer pageNumber, Integer pageSize,String keyword) {

		String sql = "SELECT v.*,r.fullName ";
		String sqlExceptSelect = " FROM tb_property_village v LEFT JOIN tb_region r ON v.regionId=r.id " ;

		return Db.paginate(pageNumber, pageSize, sql, sqlExceptSelect);
	}

	public Page<Record> pageStayingVillage(String regionId, Integer pageNumber, Integer pageSize) {
		// TODO Auto-generated method stub
		return null;
	}

	public Page<Record> pageResearchReport(Integer pageNumber, Integer pageSize) {
		// TODO Auto-generated method stub
		return null;
	}

	public Page<Record> pageSuggest(Integer pageNumber, Integer pageSize) {
		// TODO Auto-generated method stub
		return null;
	}

	public List<Record> findAllMember() {

		String sql = "SELECT tm.id, tm.`name`, ta.accreditDepartmentId, ta.accreditPostId"
				+ " FROM tb_member tm LEFT JOIN tb_accredited ta ON tm.id=ta.memberId" + " WHERE isValid=?";
		return Db.find(sql, 0);
	}

	public Record findRegionInfo(String regionId) {

		String sql = "SELECT tri.population,tri.count,tri.averageArea,tri.averageForestryArea,tri.cultivatedArea,tri.irrigatedArea,"
				+ "tri.fieldArea,tri.landArea,tri.forestryArea,tri.backForestryArea,tri.fruitTreeArea,tri.grassArea,tri.waterArea,tri.economicArea,"
				+ "tri.grossIncome,tri.householdIncome,tri.propertyIncome,tri.transferIncome,tri.totalNetIncome,tri.totalPerNetIncome,"
				+ "tri.totalProductionExpenses,tri.totalOtherExpenses,tri.remark,tri.shortDescription,tri.createTime,"
				+ "tri.updateTime,tri.operator,tri.assignDate,tri.assignEndDate,tri.povertyTypeId,"

				+ "tr.id,tr.shortName,tr.regionType,tr.parentName,"
				
				//添加村领导信息
				+ " tri.headOfVillageCommitteeId,tri.headOfVillageCommitteeName, "
				+ " tri.villageBranchSecretaryId,tri.villageBranchSecretaryName, "
				+ " tri.poorFamilyLeaderId,tri.poorFamilyLeaderName, "

				+ "group_concat(distinct tlrr.leaderId) as leaderIds,"
				+ "group_concat(distinct tmrr.memberId) as memberIds,"
				+ "group_concat(distinct tl.orgId) as orgIds,"
				+ "group_concat(distinct tl.name) as leaderNames," + "group_concat(distinct tm.name) as memberNames"

				+ " FROM tb_region tr" + " LEFT JOIN tb_region_info tri ON tr.id=tri.regionId AND tri.isValid>=?"
				+ " LEFT JOIN tb_leader_region_relation tlrr ON tlrr.regionId=tri.regionId AND tlrr.isValid>=?"
				+ " LEFT JOIN tb_leader tl ON tl.id=tlrr.leaderId AND tl.isValid>=?"
				+ " LEFT JOIN tb_member_region_relation tmrr ON tmrr.regionId=tri.regionId AND tmrr.isValid>=?"
				+ " LEFT JOIN tb_member tm ON tm.id=tmrr.memberId AND tm.isValid>=?"
				+ " WHERE tr.id=? AND tr.isValid>=?";

		// 还原为内网版本
		return Db.findFirst(sql, 0, 0, 0, 0, 0, regionId, 0);
	}
	
	/**
	 * 获取区域绑定的扶贫人员信息
	 * @param regionId 区域ID
	 * @param relationType 关系类型：0扶贫联系人	1第一书记
	 * @return
	 */
	public List<Member> findMemberInfoByRIdAndRType(String regionId, int relationType){
		List<Member> result = null;
		
		String sql = "SELECT tm.id, tm.name, tmrr.regionId, tmrr.relationType "
				+ "FROM "
				+ "tb_member tm "
				+ "JOIN tb_member_region_relation tmrr ON tmrr.isValid = tm.isValid AND tm.id = tmrr.memberId "
				+ "AND tmrr.regionId = ? " 
				+ "AND tmrr.relationType = ? "
				+ "AND tmrr.isValid = ? ";
		result = Member.dao.find(sql, regionId,relationType, 0);
		
		return null==result?new ArrayList<Member>():result;
	}

	/***
	 * 通过区域查找到 对应区域的相关数据 如 贫困人口数量 收入等 family_count 贫困家庭数 family_villager_count 贫困人口数
	 * cultivatedArea 耕地面积 effectiveIrrigationArea 有效灌溉面积 fieldArea 田 landArea 土
	 * forestryArea 林地 backForestryArea 退耕还林地 fruitTreeArea 林果面积 grassArea 草地面积
	 * waterArea 水田面积 economicArea 经济作为面积 averageIncome 工资性总收入 family_income 家庭总收入
	 * propertyIncome 财产性总收入 shift_income 转移性总收入 purchase_expend 生产费用总支出
	 * other_expend 其他费用支出 total_income 家庭总收入 average_income 平均收入
	 * 
	 * @param regionId
	 * @return
	 */
	public Record selectRegionRelationalData(String regionId) {

		String sql = "select family_count,family_villager_count,cultivatedArea,effectiveIrrigationArea,field as fieldArea,land as landArea,forestryArea,backForestryArea,fruitTreeArea,grassArea,waterArea,economicArea,averageIncome,family_income,propertyIncome,shift_income,purchase_expend,other_expend,(averageIncome+family_income+propertyIncome+propertyIncome) as total_income,(averageIncome+family_income+propertyIncome+propertyIncome)/family_villager_count as average_income "
				+ " from("
				+ " select sum(family_count) as family_count,sum(family_villager_count) as family_villager_count "
				+ " ,sum(cultivatedArea) as cultivatedArea,sum(effectiveIrrigationArea) as effectiveIrrigationArea,sum(field) as field,sum(land) as land,sum(forestryArea) as forestryArea,sum(backForestryArea) as backForestryArea "
				+ " ,sum(fruitTreeArea) as fruitTreeArea,sum(grassArea) as grassArea,sum(waterArea) as waterArea,sum(economicArea) as economicArea,sum(averageIncome) as averageIncome,sum(family_income) as family_income,sum(propertyIncome) as propertyIncome,sum(shift_income) as shift_income,sum(purchase_expend) as purchase_expend,sum(other_expend) as other_expend "
				+ " from( "
				+ " select family1.regionId as family_region_id,count(1) as family_count,0 as family_villager_count,0 as cultivatedArea,0 as effectiveIrrigationArea,0 as field,0 as land,0 as forestryArea,0 as backForestryArea,0 as fruitTreeArea,0 as grassArea,0 as waterArea,0 as economicArea,0 as averageIncome,0 as family_income,0 as propertyIncome,0 as shift_income,0 as purchase_expend,0 as other_expend "
				+ " from arnold.tb_family as family1 "
				+ " where family1.isValid=0 and (family1.ralationTypeId='dea6cc62-d4f5-47f9-9943-972900e2fc9b' or family1.ralationTypeId='e87df7f3-f7ad-4fea-982c-127c6e24fba6') "
				+ " group by family1.regionId " + " union all "
				+ " select family1.regionId as family_region_id,0 as family_count,count(1) as family_villager_count,0 as cultivatedArea,0 as effectiveIrrigationArea,0 as field,0 as land,0 as forestryArea,0 as backForestryArea,0 as fruitTreeArea,0 as grassArea,0 as waterArea,0 as economicArea,0 as averageIncome,0 as family_income,0 as propertyIncome,0 as shift_income,0 as purchase_expend,0 as other_expend "
				+ " from arnold.tb_family as family1 inner join arnold.tb_villager as villager1 on family1.id=villager1.familyId "
				+ " where family1.isValid=0 and (family1.ralationTypeId='dea6cc62-d4f5-47f9-9943-972900e2fc9b' or family1.ralationTypeId='e87df7f3-f7ad-4fea-982c-127c6e24fba6') "
				+ " group by family1.regionId " + " union all "
				+ " select family1.regionId as family_region_id,0 as family_count,0 as family_villager_count,sum(famaily_live1.cultivatedArea) as cultivatedArea,sum(famaily_live1.effectiveIrrigationArea) as effectiveIrrigationArea,sum(famaily_live1.field) as field,sum(famaily_live1.land) as land,sum(famaily_live1.forestryArea) as forestryArea,sum(famaily_live1.backForestryArea) as backForestryArea,sum(famaily_live1.fruitTreeArea) as fruitTreeArea,sum(famaily_live1.grassArea) as grassArea,sum(famaily_live1.waterArea) as waterArea,sum(famaily_live1.economicArea) as economicArea,0 as averageIncome,0 as family_income,sum(famaily_live1.propertyIncome) as propertyIncome,0 as shift_income,0 as purchase_expend,0 as other_expend "
				+ " from arnold.tb_family as family1 inner join arnold.tb_family_livecondition as famaily_live1 on family1.id=famaily_live1.familyId "
				+ " where family1.isValid=0 " + " group by family1.regionId " + " union all "
				+ " select family1.regionId as family_region_id,0 as family_count,0 as family_villager_count,0 as cultivatedArea,0 as effectiveIrrigationArea,0 as field,0 as land,0 as forestryArea,0 as backForestryArea,0 as fruitTreeArea,0 as grassArea,0 as waterArea,0 as economicArea,sum(post_happen1.averageIncome*12) as averageIncome,0 as family_income,0 as propertyIncome,0 as shift_income,0 as purchase_expend,0 as other_expend "
				+ " from arnold.tb_family as family1 inner join arnold.tb_villager as villager1 on family1.id=villager1.familyId "
				+ " inner join tb_villager_post_happen as post_happen1 on villager1.id =post_happen1.villagerid "
				+ " where family1.isValid=0 and year(post_happen1.postLeaveDate)=year(now()) and post_happen1.ralationType=3 "
				+ " and (family1.ralationTypeId='dea6cc62-d4f5-47f9-9943-972900e2fc9b' or family1.ralationTypeId='e87df7f3-f7ad-4fea-982c-127c6e24fba6')  "
				+ " group by family1.regionId " + " union all "
				+ " select regionId as  family_region_id,0 as family_count,0 as family_villager_count,0 as cultivatedArea,0 as effectiveIrrigationArea,0 as field,0 as land,0 as forestryArea,0 as backForestryArea,0 as fruitTreeArea,0 as grassArea,0 as waterArea,0 as economicArea,0 as averageIncome,sum(work_averageIncome) as family_income,0 as propertyIncome,0 as shift_income,0 as purchase_expend,0 as other_expend "
				+ " from( " + " select regionId,sum(family_averageIncome) as work_averageIncome "
				+ " from( "
				+ " SELECT family1.regionId,family_happen1.amount*family_happen1.unitPrice as family_averageIncome "
				+ " FROM arnold.tb_family as family1 inner join arnold.tb_family_economic_self_sale_happen as family_happen1 on family1.id=family_happen1.familyid "
				+ " where family1.isValid=0 and year(ifnull(family_happen1.tradeTime,family_happen1.createTime))=year(now()) "
				+ " and (family1.ralationTypeId='dea6cc62-d4f5-47f9-9943-972900e2fc9b' or family1.ralationTypeId='e87df7f3-f7ad-4fea-982c-127c6e24fba6') "
				+ " ) as work1 " + " group by regionId " + " union all "
				+ " select regionId,sum(family_averageIncome) as work_averageIncome " + " from( "
				+ " SELECT family1.regionId,family_happen1.amount*family_happen1.unitPrice as family_averageIncome,0 as shift_income,0 as purchase_expend,0 as other_expend "
				+ " FROM arnold.tb_family as family1 inner join arnold.tb_family_economic_underwriting_happen as family_happen1 on family1.id=family_happen1.familyid "
				+ " where family1.isValid=0 and year(ifnull(family_happen1.tradeTime,family_happen1.createTime))=year(now())  "
				+ " and (family1.ralationTypeId='dea6cc62-d4f5-47f9-9943-972900e2fc9b' or family1.ralationTypeId='e87df7f3-f7ad-4fea-982c-127c6e24fba6') "
				+ " ) as work1 " + " group by regionId " + " ) as work2 "
				+ " group by regionId " + " union all "
				+ " select family1.regionId as family_region_id,0 as family_count,0 as family_villager_count,0 as cultivatedArea,0 as effectiveIrrigationArea,0 as field,0 as land,0 as forestryArea,0 as backForestryArea,0 as fruitTreeArea,0 as grassArea,0 as waterArea,0 as economicArea,0 as averageIncome,0 as family_income,0 as propertyIncome,sum(income_happen1.income) as shift_income,0 as purchase_expend,0 as other_expend "
				+ " from arnold.tb_family as family1 inner join arnold.tb_family_shift_income_happen as income_happen1 on family1.id=income_happen1.fmailyId "
				+ " where family1.isValid=0 and year(income_happen1.incomeTime)=year(now()) "
				+ " group by family1.regionId " + " union all "
				+ " select family1.regionId as family_region_id,0 as family_count,0 as family_villager_count,0 as cultivatedArea,0 as effectiveIrrigationArea,0 as field,0 as land,0 as forestryArea,0 as backForestryArea,0 as fruitTreeArea,0 as grassArea,0 as waterArea,0 as economicArea,0 as averageIncome,0 as family_income,0 as propertyIncome,0 as shift_income,sum(purchase_happen1.UNITPRICE*purchase_happen1.AMOUNT*-1) as purchase_expend,0 as other_expend "
				+ " from arnold.tb_family as family1 inner join arnold.tb_family_economic_purchase_happen as purchase_happen1 on family1.id=purchase_happen1.familyId "
				+ " where family1.isValid=0 and year(ifnull(purchase_happen1.tradeTime,purchase_happen1.createTime))=year(now()) "
				+ " group by family1.regionId "
				+ " ) as work3 inner join arnold.tb_region as region1 on work3.family_region_id=region1.id "
				+ " where work3.family_region_id=? or region1.parentId=? " + " ) as work4";

		return Db.findFirst(sql, regionId, regionId);
	}

	/**
	 * 查询 家庭经济收入
	 * 
	 * family_id 家庭id
	 * family_income 家庭总收入
	 * 
	 * @return
	 */
	public List<Record> selectFamilyInCome()
	{
		String sql = "select family_id,sum(family_averageIncome) as family_income  from( " + 
				" select family_id,sum(family_averageIncome) as family_averageIncome " + 
				" from(SELECT family1.id as family_id,family_happen1.amount*family_happen1.unitPrice as family_averageIncome " + 
				" FROM arnold.tb_family as family1 inner join arnold.tb_family_economic_self_sale_happen as family_happen1 on family1.id=family_happen1.familyid " + 
				" ) as work1 group by family_id " + 
				" union all " + 
				" select family_id,sum(family_averageIncome) as family_averageIncome from( " + 
				" SELECT family1.id as family_id,family_happen1.amount*family_happen1.unitPrice as family_averageIncome " + 
				" FROM arnold.tb_family as family1 inner join arnold.tb_family_economic_purchase_happen as family_happen1 on family1.id=family_happen1.familyid " + 
				" ) as work1 group by family_id " + 
				" union all " + 
				" select family_id,sum(family_averageIncome) as family_averageIncome from( " + 
				" SELECT family1.id as family_id,family_happen1.amount*family_happen1.unitPrice as family_averageIncome " + 
				" FROM arnold.tb_family as family1 inner join arnold.tb_family_economic_underwriting_happen as family_happen1 on family1.id=family_happen1.familyid " + 
				" ) as work1 group by family_id ) as work2 group by family_id";

		return Db.query(sql);
	}
	
	/**
	 * 查询 家庭经济收入
	 * 
	 * family_id 家庭id
	 * family_income 家庭总收入
	 * 
	 * @return
	 */
	public double selectFamilyInComeByFId(String familyId) {
		String sql = "select sum(family_averageIncome) as family_income  from( " + 
				" select family_id,sum(family_averageIncome) as family_averageIncome " + 
				" from(SELECT family1.id as family_id,family_happen1.amount*family_happen1.unitPrice as family_averageIncome " + 
				" FROM arnold.tb_family as family1 inner join arnold.tb_family_economic_self_sale_happen as family_happen1 on family1.id=family_happen1.familyid " + 
				" WHERE family1.id = ? " +
				" ) as work1 group by family_id " + 
				" union all " + 
				" select family_id,sum(family_averageIncome) as family_averageIncome from( " + 
				" SELECT family1.id as family_id,family_happen1.amount*family_happen1.unitPrice as family_averageIncome " + 
				" FROM arnold.tb_family as family1 inner join arnold.tb_family_economic_purchase_happen as family_happen1 on family1.id=family_happen1.familyid " + 
				" WHERE family1.id = ? " +
				" ) as work1 group by family_id " + 
				" union all " + 
				" select family_id,sum(family_averageIncome) as family_averageIncome from( " + 
				" SELECT family1.id as family_id,family_happen1.amount*family_happen1.unitPrice as family_averageIncome " + 
				" FROM arnold.tb_family as family1 inner join arnold.tb_family_economic_underwriting_happen as family_happen1 on family1.id=family_happen1.familyid " + 
				" WHERE family1.id = ? " +
				" ) as work1 group by family_id ) as work2 group by family_id";
		Double resDouble  = Db.queryDouble(sql, familyId, familyId, familyId);
		if(null==resDouble)
			resDouble = 0d;
		return resDouble;
	}
	
	public Page<Record> pageDesignatedHelpingVillage(Integer pageNumber, Integer pageSize, QueryBaseUtil queryBaseUtil) {
		String select = "SELECT tri.regionId AS villageId, r.fullName, tri.povertyTypeId, "
				+ "(SELECT COUNT(1) FROM tb_family tf WHERE tf.isValid = 0 AND EXISTS ( "
				+ "  SELECT 1 FROM tb_region etr WHERE etr.id = tf.regionId AND etr.parentId = r.id"
				+ ")) as count, "
				+ "(SELECT COUNT(1) FROM tb_villager tv WHERE tv.isValid = 0 AND EXISTS ("
				+ " SELECT 1 FROM tb_region etr " 
				+ " JOIN tb_family etf ON etf.regionId = etr.id "
				+ " WHERE etr.parentId = r.id and etf.id = tv.familyId AND etf.isValid = tv.isValid"
				+ ")) as population, "
				+ "ifnull(tri.groupCount,1) as groupCount, " +
				"tri.assignDate, group_concat(DISTINCT tl.id) AS leaderIds, group_concat(DISTINCT tl.`name`) AS leaderName, " +
				"group_concat(DISTINCT tl.orgId) AS orgIds, group_concat(DISTINCT tl.helperTypeId) AS helperTypeIds, " +
				"group_concat(DISTINCT tm.`name`) AS memberNames, group_concat(DISTINCT tm.id) AS memberIds, " +
				"group_concat(DISTINCT r1.id) AS zuCount ";

		StringBuffer sqlExceptSelect = new StringBuffer(" FROM tb_region_info tri LEFT JOIN tb_leader_region_relation tlrr ON tri.regionId = tlrr.regionId " +
				"AND tlrr.isValid >= 0 LEFT JOIN tb_leader tl ON tl.id = tlrr.leaderId AND tl.isValid >= 0 " +
				"LEFT JOIN tb_member_region_relation tmrr ON tmrr.regionId = tri.regionId AND tmrr.isValid >= 0 " +
				"LEFT JOIN tb_member tm ON tm.id = tmrr.memberId AND tm.isValid >= 0 LEFT JOIN tb_region r ON tri.regionId = r.id " +
				"LEFT JOIN tb_region r1 ON tri.regionId = r1.parentId " +
				"WHERE "
				+ "r.regionType = 5 AND "//del //只显示村不显示组
				+ "tlrr.id IS NOT NULL");
		sqlExceptSelect.append(queryBaseUtil.getSpliceSql()).append(" GROUP BY tri.regionId");
		List<Object> param=queryBaseUtil.getParam();
		return Db.paginate(pageNumber, pageSize, select, sqlExceptSelect.toString(), param.toArray());
	}

	public Page<Record> pageHelpBranch(Integer pageNumber, Integer pageSize, String regionid, String keyWord) {

		String sql = "SELECT h.*,r.fullName FROM team_help h LEFT JOIN tb_region r ON r.id = h.regionid WHERE 1=1 ";
		String sqlExceptSelect = "";
		if (regionid == null && keyWord == null) {
			sqlExceptSelect = "";
		} else if (regionid != null && (keyWord == null || keyWord.equals(""))) {
			sqlExceptSelect = " AND h.regionid = '" + regionid + "' ";
		} else if (regionid == null && keyWord != null && !keyWord.equals("")) {
			sqlExceptSelect = " AND h.name LIKE '%" + keyWord + "%' ";
		} else if (regionid != null && keyWord != null && !keyWord.equals("")) {
			sqlExceptSelect = " AND h.regionid = '" + regionid + "' AND h.name LIKE '%" + keyWord + "%' ";
		}

		return Db.paginate(pageNumber, pageSize, sql + sqlExceptSelect, "");
	}

	public Page<Record> pageFamilyTrainingGuide(String familyId, Integer pageNumber, Integer pageSize) {
		// TODO Auto-generated method stub

		String select = "SELECT " + " tt.name as trainName,tt.postId,tt.content,tt.orgId,tt.startTime,tt.endTime,"
				+ " tts.name as speakerName," + " tm.name as memberName";

		/*
		 * String sqlExceptSelect = " FROM tb_villager tv" +
		 * " LEFT JOIN tb_train_participant ttp ON ttp.joinPersonid=tv.id" +
		 * " LEFT JOIN tb_train tt ON tt.id=ttp.trainid AND tt.isValid>=?" +
		 * " LEFT JOIN tb_train_speaker tts ON tts.id=tt.userId" +
		 * " LEFT JOIN tb_member tm ON tm.id=ttp.helpPersonid AND tm.isValid>=?" +
		 * " WHERE tv.familyId=? AND tv.isValid>=?";
		 */

		String sqlExceptSelect = " FROM tb_villager tv"
				+ " INNER JOIN tb_train_participant ttp ON ttp.joinPersonid=tv.id"
				+ " INNER JOIN tb_train tt ON tt.id=ttp.trainid AND tt.isValid>=?"
				+ " LEFT JOIN tb_train_speaker tts ON tts.trainid=tt.id"
				+ " LEFT JOIN tb_member tm ON tm.id=ttp.helpPersonid" + " WHERE tv.familyId=? AND tv.isValid>=?";

		return Db.paginate(pageNumber, pageSize, select, sqlExceptSelect, 0, familyId, 0);
	}

	public Page<Record> pageFamilyEducationalGuide(String familyId, Integer pageNumber, Integer pageSize) {
		// TODO Auto-generated method stub

		String select = "SELECT "
				+ " te.className,te.typeId,te.major,te.name as educationalInstitutionName,te.startTime,te.endTime,"
				+ " tm.name as memberName";

		/*
		 * String sqlExceptSelect = " FROM tb_villager tv" +
		 * " LEFT JOIN tb_education_participant tep ON tep.joinPersonid=tv.id" +
		 * " LEFT JOIN tb_education te ON te.id=tep.educationid" +
		 * " LEFT JOIN tb_member tm ON tm.id=tep.helpPersonid AND tm.isValid>=?" +
		 * " WHERE tv.familyId=? AND tv.isValid>=?";
		 */

		String sqlExceptSelect = " FROM tb_villager tv"
				+ " INNER JOIN tb_education_participant tep ON tep.joinPersonid=tv.id"
				+ " INNER JOIN tb_education te ON te.id=tep.educationid"
				+ " LEFT JOIN tb_member tm ON tm.id=tep.helpPersonid" + " WHERE tv.familyId=? AND tv.isValid>=?";

		return Db.paginate(pageNumber, pageSize, select, sqlExceptSelect, familyId, 0);
	}

	public Page<Record> pageFamilyEmploymentInformation(String familyId, Integer pageNumber, Integer pageSize) {
		// TODO Auto-generated method stub

		String select = "SELECT "
				+ " tvph.jobCategory,tvph.postId,tvph.companyProject,tvph.department,tvph.averageIncome,tvph.postLeaveDate,"
				+ " tvph.isFiveFund,tvph.isEatEncase,tvph.isEat,tvph.isEncase,tvph.isLunch,tvph.isOther,"

				+ " tm.name as memberName";

		// 岗位关系：1申请，2，取消，3上岗，4辞退，5辞职
		String sqlExceptSelect = " FROM tb_villager tv"
				+ " INNER JOIN tb_villager_post_happen tvph ON tvph.villagerId=tv.id AND tvph.ralationType=?"
				+ " LEFT JOIN tb_member tm ON tm.id=tvph.memberId" + " WHERE tv.familyId=? AND tv.isValid>=?";

		return Db.paginate(pageNumber, pageSize, select, sqlExceptSelect, 3, familyId, 0);
	}

	/**
	 * @Author PanChangGui
	 * @Time 2017年9月27日 下午6:22:43
	 * @Description 查找村下的村名，要求tb_family.regionId是组Id或村Id; 参数regionId是对应的村id
	 * 贫困属性是贫困：ralationTypeId=e87df7f3-f7ad-4fea-982c-127c6e24fba6
	 */
	public List<Record> listVillagerName(String regionId) {		
		// TODO Auto-generated method stub
		
		String sql = "SELECT tv.id AS villagerId, tv.name AS villagerName"
				+ " FROM tb_family tf"
				+ " INNER JOIN tb_villager tv ON tv.familyId=tf.id AND tv.isValid>=?"
				+ " INNER JOIN tb_region tr ON tr.id=tf.regionId AND (tr.id=? OR tr.parentId=?) AND tr.isValid>=?"
				+ " WHERE tf.ralationTypeId=? AND tf.isValid>=?";
			
		return Db.find(sql, 0, regionId, regionId, 0, "e87df7f3-f7ad-4fea-982c-127c6e24fba6",0);
	}

	public Page<Record> pageFamilyList(String pHamletId, List<String> groupIds, Integer pageNumber, Integer pageSize) {
		String sql = "SELECT tf.id AS familyId,tf.number,tv.name as villagerName,tv.IDnumber,tv.raceId,"
				+ "(SELECT COUNT(1) FROM tb_villager ttv WHERE ttv.familyId = tf.id AND ttv.isValid = tf.isValid) "
				+ "AS villagerCount,GROUP_CONCAT(DISTINCT tfbr.burdenId) AS burdenIds,"
				+ "GROUP_CONCAT(DISTINCT tfmr.measureId) AS measureIds,tf.ralationTypeId,"
				+ "("
				+ " select GROUP_CONCAT(DISTINCT tl.name) from tb_leader tl,tb_leader_region_relation tlrr "
				+ " where tl.id = tlrr.leaderId AND tl.isValid = tlrr.isValid and tl.isValid=tf.isValid "
				+ " and (tlrr.regionId = tf.regionId or tlrr.regionId = '"+ pHamletId+"')"
				+ ") AS leaderNames ";	
		StringBuffer sqlExceptSelect = new StringBuffer(" FROM tb_family tf "
				+ "LEFT JOIN tb_villager tv ON tv.id = tf.villagerId "
				+ "LEFT JOIN tb_family_burden_relation tfbr ON tfbr.familyId = tf.id AND tfbr.isValid = tf.isValid "
				+ "LEFT JOIN tb_family_measure_relation tfmr ON tfmr.familyId = tf.id AND tfmr.isValid = tf.isValid "
				+ "WHERE tf.isValid = ?");
		if(null!=groupIds && groupIds.size()>0){
			sqlExceptSelect.append(" and (");
			for(int i=0;i<groupIds.size();i++){
				if(i==0){
					sqlExceptSelect.append(" tf.regionId='"+groupIds.get(i)+"'");
				}else{
					sqlExceptSelect.append(" or tf.regionId='"+groupIds.get(i)+"'");
				}
			}
			sqlExceptSelect.append(" )");
		}
		
		sqlExceptSelect.append(" GROUP BY tf.id ");
		
		return Db.paginate(pageNumber, pageSize, sql, sqlExceptSelect.toString(), 0);
	}

}
