package com.arnold.server.model;

import java.util.Date;

import com.arnold.server.model.base.BaseStaticFamilyIncome;
import com.huntersun.tool.Utils;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class StaticFamilyIncome extends BaseStaticFamilyIncome<StaticFamilyIncome> {
	public static final StaticFamilyIncome dao = new StaticFamilyIncome();
	
	private String tableName = "tb_static_family_income";
	
	public void addOrUpdRecord(StaticFamilyIncome staticFamilyIncome) {
		String familyId = staticFamilyIncome.getFamilyId();
		String year = staticFamilyIncome.getYear();
		StaticFamilyIncome info = dao.findFirst("select * from " 
				+ tableName + " where familyId=? and year=? and isValid=?", familyId, year, 0);
		Date operDate = new Date();
		if(null!=info && !Utils.isBlankOrEmpty(info.getId())){
			//更新
			info.setUpdateTime(operDate);
			info.setRegionId(staticFamilyIncome.getRegionId());
			info.setCountryId(staticFamilyIncome.getCountryId());
			info.setCountryName(staticFamilyIncome.getCountryName());
			info.setHamletId(staticFamilyIncome.getHamletId());
			info.setHamletName(staticFamilyIncome.getHamletName());
			info.setGroupId(staticFamilyIncome.getGroupId());
			info.setGroupName(staticFamilyIncome.getGroupName());
			info.setVillagerId(staticFamilyIncome.getVillagerId());
			info.setName(staticFamilyIncome.getName());
			info.setVillagerCount(staticFamilyIncome.getVillagerCount());
			info.setYearIncome(staticFamilyIncome.getYearIncome());
			info.setYearAnalyseIncome(staticFamilyIncome.getYearAnalyseIncome());
			info.setFamilyYearIncome(staticFamilyIncome.getFamilyYearIncome());
			info.setAverageIncome(staticFamilyIncome.getAverageIncome());
			info.setAverageAnalyseIncome(staticFamilyIncome.getAverageAnalyseIncome());
			info.setPersonYearIncome(staticFamilyIncome.getPersonYearIncome());
			info.setSalaryIncome(staticFamilyIncome.getSalaryIncome());
			info.setFamilyIncome(staticFamilyIncome.getFamilyIncome());
			info.setFamilyAnalyseIncome(staticFamilyIncome.getFamilyAnalyseIncome());
			info.setPropertyIncome(staticFamilyIncome.getPropertyIncome());
			info.setSubsidy(staticFamilyIncome.getSubsidy());
			info.setProductPay(staticFamilyIncome.getProductPay());
			info.setOtherPay(staticFamilyIncome.getOtherPay());
//			System.out.println("update====="+info.toJson());
			info.update();
		}else{
			//新增
			staticFamilyIncome.setId(Utils.create36UUID());
			staticFamilyIncome.setCreateTime(operDate);
			staticFamilyIncome.setUpdateTime(operDate);
			staticFamilyIncome.setIsValid(0);//有效
//			System.out.println("save====="+staticFamilyIncome.toJson());
			staticFamilyIncome.save();
		}
	}
	
	public Record findByFamilyIdAndYear(String pFamilyId, String year){
		String sql = "select tsfi.id,"
				+ " tsfi.countryId, "
				+ " tsfi.countryName, "
				+ " tsfi.hamletId, "
				+ " tsfi.hamletName, "
				+ " tsfi.groupId, "
				+ " tsfi.groupName, "
				+ " tsfi.name, "
				+ " tsfi.villagerCount as `count`, "
				+ " tsfi.year, "
				+ " tsfi.yearIncome, "
				+ " tsfi.propertyIncome, "
				+ " tsfi.familyYearIncome as livingIncome, "
				+ " tsfi.personYearIncome as averageIncome, "
				+ " tfl.receivedEndowmentInsurance, "
				+ " tfl.receivedLowGold, "
				+ " tfl.claimMedicalExpenses, "
				+ " tfl.medicalAid, "
				+ " tfl.receivedFamilyPlanningMoney, "
				+ " tfl.ecologicalCompensation "
				+ " from tb_static_family_income tsfi "
				+ " left join tb_family_livecondition tfl on tfl.familyId = tsfi.familyId and tfl.isValid = tsfi.isValid "
				+ "where tsfi.familyId=? and tsfi.year=? and tsfi.isValid=0 ";
		return Db.findFirst(sql, pFamilyId, year);
	}
	
	/**
	 * 所在乡
	 * 所在村
	 * 所在组
	 * 户主姓名
	 * 家庭人口数
	 * 财产性收入
	 * 养老金或离退休金（包括农村养老保险）= 领取养老保险金
	 * 社会救助和补助低保、扶贫款、救灾款、抚恤金等）= 领取低保金 + 领取计划生育金 + 生态补偿金 + 培训补助
	 * 报销医疗费 = 新农合报销医疗费 + 医疗救助金
	 * 教育资助 = 教育补助
	 * 现金政策性惠农补贴（粮食直补等生产综合补贴）
	 * 教育支出
	 * 医疗费用支出
	 * @description 实时获取家庭年收入基本信息
	 * @author luzy
	 * @date 2017年12月25日
	 * @param pFamilyId
	 * @param year
	 * @return
	 */
	public Record queryByFamilyIdAndYear(String pFamilyId){
		String sql = " SELECT "
				+ "   ptr.parentName AS countryName,"
				+ "   ptr.shortName AS hamletName,"
				+ "   tr.shortName AS groupName,"
				+ "   tv.name,"
				+ "   (SELECT "
				+ "     COUNT(1) "
				+ "   FROM"
				+ "     tb_villager ctv "
				+ "   WHERE ctv.isValid = tf.isValid "
				+ "     AND ctv.familyId = tf.id) AS villagerCount,"
				+ "   IFNULL(tfl.propertyIncome, 0) AS propertyIncome,"
				+ "   IFNULL(tfl.receivedEndowmentInsurance, 0) AS receivedIncome,"
				+ "   IFNULL(tfl.receivedLowGold, 0)+IFNULL(tfl.receivedFamilyPlanningMoney, 0)"
				+ " +IFNULL(tfl.ecologicalCompensation, 0)+IFNULL(tfl.trainingSubsidy, 0) AS helpIncome,"
				+ "   IFNULL(tfl.claimMedicalExpenses, 0)+IFNULL(tfl.medicalAid, 0) AS medicalIncome,"
				+ "   IFNULL(tfl.educationalSubsidy, 0) AS educationalIncome,"
				+ "   IFNULL(tfl.cashPolicySubsidies, 0) AS cashPolicyIncome,"
				+ "   IFNULL(tfl.educationalExpenditure, 0) AS educationalOutIncome,"
				+ "   IFNULL(tfl.medicalExpenditure, 0) AS medicalOutIncome"
				+ " FROM"
				+ "   tb_family tf "
				+ "   JOIN tb_villager tv "
				+ "     ON tv.isValid = tf.isValid "
				+ "     AND tv.id = tf.villagerId "
				+ "   JOIN tb_region tr "
				+ "     ON tr.isValid = tf.isValid "
				+ "     AND tr.id = tf.regionId "
				+ "     AND tr.regionType = 6 "
				+ "   JOIN tb_region ptr "
				+ "     ON ptr.isValid = tr.isValid "
				+ "     AND ptr.id = tr.parentId "
				+ "     AND ptr.regionType = 5 "
				+ "   LEFT JOIN tb_family_livecondition tfl "
				+ "     ON tfl.isValid = tf.isValid "
				+ "     AND tfl.familyId = tf.id "
				+ " WHERE tf.id = ? "
				+ "   AND tf.isValid = 0";
		return Db.findFirst(sql, pFamilyId);
	}

	public Page<StaticFamilyIncome> pageStaticFamilyIncomeByFamilyId(
			Integer pPageNumber, Integer pPageSize, String pFamilyId, String pYear) {
		String select = "SELECT id,familyId,salaryIncome,familyIncome as familyAnalyseIncome,propertyIncome,subsidy,"
				+ "familyYearIncome,personYearIncome,productPay,otherPay,year";	
		StringBuffer sqlExceptSelect =new StringBuffer(" FROM " + tableName + " where isValid>=0 and familyId=? ");
		if(!Utils.isBlankOrEmpty(pYear)){
			sqlExceptSelect.append(" and year = '"+pYear+"'");
		}
		return dao.paginate(pPageNumber, pPageSize, select, sqlExceptSelect.toString(), pFamilyId);
	}
	
}
