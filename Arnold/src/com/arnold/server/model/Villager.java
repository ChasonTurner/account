package com.arnold.server.model;

import java.util.List;

import com.arnold.server.model.base.BaseVillager;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.pallas.utils.Utils;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Villager extends BaseVillager<Villager> {
	public static final Villager dao = new Villager();
	
	private final String tableName = "tb_villager";
	
	
	public Page<Villager> pageVillagerByIds(int pageNumber, int pageSize, String ids){
		
		String sql = "SELECT *";
		
		String sqlExceptSelect = " FROM tb_villager t1 ";
		
		if(!Utils.isBlankOrEmpty(ids)){
			
			String[] idStrArr = ids.split(",");
			int i = 0;
			for(String str : idStrArr){
				
				if(i == 0){
					sqlExceptSelect += " WHERE t1.id = '" + str + "'";
				}else{
					sqlExceptSelect += " OR t1.id = '" + str + "'";
				}
				i++;
			}
			
		}
		
		return dao.paginate(pageNumber, pageSize, sql, sqlExceptSelect);
				
	}
	/**
	 * @Description: 根据id查询
	 * @author Li Bangming;
	 * @date 2017年8月15日 下午4:14:34
	 * @param id
	 * @return
	 */
	public Villager queryVillagerById(String id){
		
		return dao.findById(id);
				
	}
	public Villager findByVillagerId(String villagerId) {
		return dao.findFirst("select * from tb_villager" + " where id=?", villagerId, 1);
	}
	
	public Villager getVillagerByIDNumber(String IDCard){
		
		String sql = "SELECT * FROM tb_villager t1 WHERE t1.IDnumber = ?";
		
		
		return dao.findFirst(sql, IDCard);
				
	}
	
	/**
	 * 判断非VillagerId用户是否使用过身份证号iDnumber
	 * @param iDnumber
	 * @param VillagerId 为空，查询是否使用过身份证号
	 * @return
	 */
	public boolean isExistIDNumberOfOther(String iDnumber, String VillagerId){
		boolean result = false;//默认不存在
		StringBuilder bSql = new StringBuilder("SELECT count(1) FROM tb_villager tv WHERE tv.IDnumber = ? ");
		
		if(!Utils.isBlankOrEmpty(VillagerId)){
			bSql.append(" and tv.id <> '"+VillagerId+"'");
		}
		
		Long existInfo = Db.queryLong(bSql.toString(), iDnumber);
		if(null!=existInfo && existInfo>0){
			result = true;
		}
		return result;
	}
	
	/**
	 * @Description: 根据关键字模糊查询
	 * @author Li Bangming;
	 * @date 2017年8月17日 上午10:58:07
	 * @param IDCard
	 * @return
	 */
	public List<Villager> getVillagerByKeyWord(String keyWord){
		
		String sql = "SELECT * FROM tb_villager t1 WHERE"
				+ " t1.IDnumber like '%"+keyWord+"%' or t1.name like '%"+keyWord+"%'";
		
		return dao.find(sql);			
	}
	
	/**
	 * 获取家庭成员信息
	 * @param familyId
	 * @return
	 */
	public List<Record> getVillagerInfoByFamilyId(String familyId) {
		String sql = "SELECT "
		  +" tv.relationOfHouseholderId, "
		  +" tv.name, "
		  +" tv.sexId, "
		  +" TIMESTAMPDIFF(YEAR, tv.birthday, CURDATE()) AS age, "
		  +" tv.IDnumber, "
		  +" tv.laborCapacityId, "
		  +" tv.schoolStatusId, "
		  +" tv.insuranceId, "
		  +" tv.medicalInsuranceId, "
		  +" tv.isWishEmployment, "
		  +" tv.expectProfessionId, "
		  +" tv.expectWorkplaceId, "
		  +" tv.isWishTrain, "
		  +" tv.expectTrainProfessionId, "
		  +" tv.expectTrainTime, "
		  +" tv.remark "
		  +" FROM "
		  +" tb_villager tv  "
		  +" WHERE tv.familyId = ?  "
		  +" AND tv.isValid = ? ";
		return Db.find(sql, familyId, 0);
	}
	/**
	 * @Author PanChangGui
	 * @Time 2017年10月3日 下午3:14:02
	 * @Description 
	 */
	public Villager getHouseholderByFamilyId(String familyId) {
		// TODO Auto-generated method stub
		
		//户主是poseidon中的ID：a6cdb543-8f1c-4440-878c-746663231e0d
		
		String sql = "SELECT * FROM " + tableName + " WHERE familyId=? AND relationOfHouseholderId=? AND isValid>=?";
		
		
		return dao.findFirst(sql, familyId, "a6cdb543-8f1c-4440-878c-746663231e0d", 0);
	}
	
	public List<Villager> listVillager() {
		String sql = "SELECT * FROM " + tableName + " WHERE isValid>=?";
		
		return dao.find(sql, 0);
	}
	
	/** 依据家庭Id获取户主信息 */
	public Villager findFamilyVillageInfoByFId(String familyId) {
		String sql = "select tv.* from tb_family tf "
				+ " join tb_villager tv on tv.isValid = tf.isValid and tv.id = tf.villagerId "
				+ " where tf.isValid=? and tf.id=?";
		return dao.findFirst(sql, 0, familyId);
	}
	
}
